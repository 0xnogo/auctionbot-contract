{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "StrategyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "StrategyDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "StrategyEnabled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyContract",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_strategyIndex",
          "type": "uint256"
        }
      ],
      "name": "disableStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_strategyIndex",
          "type": "uint256"
        }
      ],
      "name": "enableStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getStrategy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IStrategy",
              "name": "strategyContract",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            }
          ],
          "internalType": "struct StrategyData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "strategyContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e8dd6e572e31bfab1f6d83073bc3fdb595cff8668fec40a24cb707b591ef4ab",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "450755",
    "logsBloom": "0x
    "blockHash": "0x92a96ac7b3b61c7433ef0ca5f1162fb68ce4c80700fba3b482f6d14095a9bf90",
    "transactionHash": "0x7e8dd6e572e31bfab1f6d83073bc3fdb595cff8668fec40a24cb707b591ef4ab",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x7e8dd6e572e31bfab1f6d83073bc3fdb595cff8668fec40a24cb707b591ef4ab",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x92a96ac7b3b61c7433ef0ca5f1162fb68ce4c80700fba3b482f6d14095a9bf90"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "450755",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4e9ae7c43b28288ceb9c390effeb74f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"StrategyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"StrategyDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"StrategyEnabled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyContract\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strategyIndex\",\"type\":\"uint256\"}],\"name\":\"disableStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strategyIndex\",\"type\":\"uint256\"}],\"name\":\"enableStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStrategy\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategyContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct StrategyData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategyContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/StrategyManager.sol\":\"StrategyManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/strategies/StrategyManager.sol\":{\"content\":\"pragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IStrategyManager.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\n\\ncontract StrategyManager is IStrategyManager, Ownable {\\n    mapping(uint256 => StrategyData) public strategies;\\n    uint256 public numStrategies = 2;\\n\\n    constructor() Ownable() {}\\n\\n    function getStrategy(\\n        uint256 _id\\n    ) external view override returns (StrategyData memory) {\\n        return strategies[_id];\\n    }\\n\\n    function addStrategy(address _strategyContract) external onlyOwner {\\n        require(_strategyContract != address(0), \\\"Strategy address invalid\\\");\\n        uint256 strategyIndex = numStrategies++;\\n        strategies[strategyIndex] = StrategyData(\\n            IStrategy(_strategyContract),\\n            true\\n        );\\n        emit StrategyCreated(strategyIndex, _strategyContract);\\n    }\\n\\n    function enableStrategy(uint _strategyIndex) external onlyOwner {\\n        require(_strategyIndex <= numStrategies, \\\"Invalid strategy\\\");\\n        strategies[_strategyIndex].enabled = true;\\n        emit StrategyEnabled(\\n            _strategyIndex,\\n            address(strategies[_strategyIndex].strategyContract)\\n        );\\n    }\\n\\n    function disableStrategy(uint _strategyIndex) external onlyOwner {\\n        require(_strategyIndex <= numStrategies, \\\"Invalid strategy\\\");\\n        strategies[_strategyIndex].enabled = false;\\n        emit StrategyDisabled(\\n            _strategyIndex,\\n            address(strategies[_strategyIndex].strategyContract)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8ca01f914a71202a0386e9fb2ea1dd1dca7dc9e0d8c76b292d7c104bcc5c0785\"},\"contracts/strategies/interfaces/IStrategy.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\ninterface IStrategy {\\n    function execute(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _auctionId,\\n        address _user\\n    ) external;\\n\\n    function init(\\n        uint256 _auctionId,\\n        address _token,\\n        bytes32[] memory initParams\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1e3dd4967b8b3cbd50f145950dbb34e52891bf1a8ada2c03adfa5061c9e78c3b\"},\"contracts/strategies/interfaces/IStrategyManager.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"./IStrategy.sol\\\";\\n\\nstruct StrategyData {\\n    IStrategy strategyContract;\\n    bool enabled;\\n}\\n\\ninterface IStrategyManager {\\n    event StrategyCreated(uint256 _index, address _strategy);\\n    event StrategyDisabled(uint256 _index, address _strategy);\\n    event StrategyEnabled(uint256 _index, address _strategy);\\n\\n    function getStrategy(uint256 _id) external returns (StrategyData memory);\\n}\\n\",\"keccak256\":\"0xadfaafe5e38a7a86d2fdd90798425b45a9d92bc81f289948d9f0b14ab0082bce\"}},\"version\":1}",
  "bytecode": "0x60806040526002805534801561001457600080fd5b5061001e33610023565b610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610655806100826000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806392c400641161006657806392c40064146100e85780639d9a779c146100ff578063cfc0cc3414610112578063d574ea3d14610195578063f2fde38b146101e957600080fd5b8063223e547914610098578063715018a6146100ad5780637aedb990146100b55780638da5cb5b146100c8575b600080fd5b6100ab6100a63660046105af565b6101fc565b005b6100ab610315565b6100ab6100c33660046105df565b610329565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100f160025481565b6040519081526020016100df565b6100ab61010d3660046105df565b6103db565b61016f6101203660046105df565b6040805180820190915260008082526020820152506000908152600160209081526040918290208251808401909352546001600160a01b0381168352600160a01b900460ff1615159082015290565b6040805182516001600160a01b03168152602092830151151592810192909252016100df565b6101ca6101a33660046105df565b6001602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b0390931683529015156020830152016100df565b6100ab6101f73660046105af565b61048c565b610204610505565b6001600160a01b03811661025f5760405162461bcd60e51b815260206004820152601860248201527f5374726174656779206164647265737320696e76616c6964000000000000000060448201526064015b60405180910390fd5b6002805460009182610270836105f8565b909155506040805180820182526001600160a01b03808616825260016020808401828152600087815292909152908490209251835491511515600160a01b026001600160a81b0319909216921691909117179055519091507f899fe949a0013a461f6497b6a40c0d8b01d554a7b67ef6aa1c730298baf23d9f9061030990839085909182526001600160a01b0316602082015260400190565b60405180910390a15050565b61031d610505565b610327600061055f565b565b610331610505565b6002548111156103765760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420737472617465677960801b6044820152606401610256565b600081815260016020908152604091829020805460ff60a01b19811690915582518481526001600160a01b03909116918101919091527f543df973e7612e762d9b7a5b0d7ef985da29d3106123fb7698110c99f981677991015b60405180910390a150565b6103e3610505565b6002548111156104285760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420737472617465677960801b6044820152606401610256565b6000818152600160209081526040918290208054600160a01b60ff60a01b1982161790915582518481526001600160a01b03909116918101919091527f385835f160f046d9f14e8804032058331458963f7a297b8f4f9169c9de52a5dd91016103d0565b610494610505565b6001600160a01b0381166104f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610256565b6105028161055f565b50565b6000546001600160a01b031633146103275760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610256565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156105c157600080fd5b81356001600160a01b03811681146105d857600080fd5b9392505050565b6000602082840312156105f157600080fd5b5035919050565b60006001820161061857634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122087f454adabaf11dff7abf8c37face9b3dedd99a737aaa014601353dbf360408464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806392c400641161006657806392c40064146100e85780639d9a779c146100ff578063cfc0cc3414610112578063d574ea3d14610195578063f2fde38b146101e957600080fd5b8063223e547914610098578063715018a6146100ad5780637aedb990146100b55780638da5cb5b146100c8575b600080fd5b6100ab6100a63660046105af565b6101fc565b005b6100ab610315565b6100ab6100c33660046105df565b610329565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100f160025481565b6040519081526020016100df565b6100ab61010d3660046105df565b6103db565b61016f6101203660046105df565b6040805180820190915260008082526020820152506000908152600160209081526040918290208251808401909352546001600160a01b0381168352600160a01b900460ff1615159082015290565b6040805182516001600160a01b03168152602092830151151592810192909252016100df565b6101ca6101a33660046105df565b6001602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b0390931683529015156020830152016100df565b6100ab6101f73660046105af565b61048c565b610204610505565b6001600160a01b03811661025f5760405162461bcd60e51b815260206004820152601860248201527f5374726174656779206164647265737320696e76616c6964000000000000000060448201526064015b60405180910390fd5b6002805460009182610270836105f8565b909155506040805180820182526001600160a01b03808616825260016020808401828152600087815292909152908490209251835491511515600160a01b026001600160a81b0319909216921691909117179055519091507f899fe949a0013a461f6497b6a40c0d8b01d554a7b67ef6aa1c730298baf23d9f9061030990839085909182526001600160a01b0316602082015260400190565b60405180910390a15050565b61031d610505565b610327600061055f565b565b610331610505565b6002548111156103765760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420737472617465677960801b6044820152606401610256565b600081815260016020908152604091829020805460ff60a01b19811690915582518481526001600160a01b03909116918101919091527f543df973e7612e762d9b7a5b0d7ef985da29d3106123fb7698110c99f981677991015b60405180910390a150565b6103e3610505565b6002548111156104285760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420737472617465677960801b6044820152606401610256565b6000818152600160209081526040918290208054600160a01b60ff60a01b1982161790915582518481526001600160a01b03909116918101919091527f385835f160f046d9f14e8804032058331458963f7a297b8f4f9169c9de52a5dd91016103d0565b610494610505565b6001600160a01b0381166104f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610256565b6105028161055f565b50565b6000546001600160a01b031633146103275760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610256565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156105c157600080fd5b81356001600160a01b03811681146105d857600080fd5b9392505050565b6000602082840312156105f157600080fd5b5035919050565b60006001820161061857634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122087f454adabaf11dff7abf8c37face9b3dedd99a737aaa014601353dbf360408464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/strategies/StrategyManager.sol:StrategyManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6987,
        "contract": "contracts/strategies/StrategyManager.sol:StrategyManager",
        "label": "strategies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(StrategyData)7149_storage)"
      },
      {
        "astId": 6990,
        "contract": "contracts/strategies/StrategyManager.sol:StrategyManager",
        "label": "numStrategies",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStrategy)7140": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(StrategyData)7149_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StrategyData)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyData)7149_storage"
      },
      "t_struct(StrategyData)7149_storage": {
        "encoding": "inplace",
        "label": "struct StrategyData",
        "members": [
          {
            "astId": 7146,
            "contract": "contracts/strategies/StrategyManager.sol:StrategyManager",
            "label": "strategyContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IStrategy)7140"
          },
          {
            "astId": 7148,
            "contract": "contracts/strategies/StrategyManager.sol:StrategyManager",
            "label": "enabled",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}