{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IReferralRewardManager",
          "name": "_referralRewardManager",
          "type": "address"
        },
        {
          "internalType": "contract IStrategyManager",
          "name": "_strategyManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "soldAuctioningTokens",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "soldBiddingTokens",
          "type": "uint96"
        }
      ],
      "name": "AuctionCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "CancellationSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "internalType": "uint96",
              "name": "buyAmount",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "sellAmount",
              "type": "uint96"
            },
            {
              "internalType": "string",
              "name": "referralCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "referralFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctioningTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "biddingTokenAmount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IEasyAuction.IClaimedFromOrder",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "ClaimedFromOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "_auctioningToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "_biddingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderCancellationEndDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionEndDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_auctionedSellAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_minBuyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumBiddingAmountPerOrder",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minFundingThreshold",
          "type": "uint256"
        }
      ],
      "name": "NewAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "referralCode",
          "type": "string"
        }
      ],
      "name": "NewSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "NewUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "name": "UserRegistration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionData",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "auctioningToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderCancellationEndDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auctionEndDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "initialAuctionOrder",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minimumBiddingAmountPerOrder",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interimSumBidAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "interimOrder",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "clearingPriceOrder",
          "type": "bytes32"
        },
        {
          "internalType": "uint96",
          "name": "volumeClearingPriceOrder",
          "type": "uint96"
        },
        {
          "internalType": "bool",
          "name": "minFundingThresholdNotReached",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minFundingThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionToStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_sellOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "cancelSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "orders",
          "type": "bytes32[]"
        }
      ],
      "name": "claimFromParticipantOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "order",
          "type": "bytes32"
        }
      ],
      "name": "containsOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiverUserId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getSecondsRemainingInBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "_auctioningToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "_biddingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "orderCancellationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint96",
              "name": "_auctionedSellAmount",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "_minBuyAmount",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "minimumBiddingAmountPerOrder",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minFundingThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_referralFeeNumerator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strategyId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "_strategyInitParams",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct IEasyAuction.InitParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initiateAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numUsers",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_minBuyAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_sellAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrders",
          "type": "bytes32[]"
        },
        {
          "internalType": "string",
          "name": "referralCode",
          "type": "string"
        }
      ],
      "name": "placeSellOrders",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_minBuyAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_sellAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrders",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "orderSubmitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "referralCode",
          "type": "string"
        }
      ],
      "name": "placeSellOrdersOnBehalf",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iterationSteps",
          "type": "uint256"
        }
      ],
      "name": "precalculateSellAmountSum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "referralFeeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRewardManager",
      "outputs": [
        {
          "internalType": "contract IReferralRewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "registerUser",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFeeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newfeeReceiverAddress",
          "type": "address"
        }
      ],
      "name": "setFeeParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "settleAuction",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "clearingOrder",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd57b4009f0756062f8fb66f96f90ee4263ff15f086670f09c75bb1f1773061d1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "3487142",
    "logsBloom": "0x
    "blockHash": "0xeb692f4e9177764f9334753c126cd95e4703fbdff4a14375772e83bf59a7373c",
    "transactionHash": "0xd57b4009f0756062f8fb66f96f90ee4263ff15f086670f09c75bb1f1773061d1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xd57b4009f0756062f8fb66f96f90ee4263ff15f086670f09c75bb1f1773061d1",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xeb692f4e9177764f9334753c126cd95e4703fbdff4a14375772e83bf59a7373c"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "3487142",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "d4e9ae7c43b28288ceb9c390effeb74f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IReferralRewardManager\",\"name\":\"_referralRewardManager\",\"type\":\"address\"},{\"internalType\":\"contract IStrategyManager\",\"name\":\"_strategyManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldAuctioningTokens\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldBiddingTokens\",\"type\":\"uint96\"}],\"name\":\"AuctionCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"CancellationSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctioningTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biddingTokenAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IEasyAuction.IClaimedFromOrder\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"ClaimedFromOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_auctioningToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_biddingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_auctionedSellAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"NewSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"name\":\"UserRegistration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionData\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"auctioningToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialAuctionOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interimSumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interimOrder\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"volumeClearingPriceOrder\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"minFundingThresholdNotReached\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionToStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"cancelSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"orders\",\"type\":\"bytes32[]\"}],\"name\":\"claimFromParticipantOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"order\",\"type\":\"bytes32\"}],\"name\":\"containsOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiverUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getSecondsRemainingInBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"_auctioningToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_auctionedSellAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_strategyInitParams\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IEasyAuction.InitParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initiateAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numUsers\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"placeSellOrders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"orderSubmitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"placeSellOrdersOnBehalf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterationSteps\",\"type\":\"uint256\"}],\"name\":\"precalculateSellAmountSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardManager\",\"outputs\":[{\"internalType\":\"contract IReferralRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newfeeReceiverAddress\",\"type\":\"address\"}],\"name\":\"setFeeParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"clearingOrder\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EasyAuction.sol\":\"EasyAuction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/EasyAuction.sol\":{\"content\":\"pragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libraries/IterableOrderedOrderSet.sol\\\";\\nimport \\\"./libraries/IdToAddressBiMap.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./strategies/interfaces/IStrategyManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IReferralRewardManager.sol\\\";\\nimport \\\"./interfaces/IEasyAuction.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract EasyAuction is IEasyAuction, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint64;\\n    using SafeMath for uint96;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\n    using IterableOrderedOrderSet for bytes32;\\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\\n\\n    modifier atStageOrderPlacement(uint256 auctionId) {\\n        require(\\n            (block.timestamp < auctionData[auctionId].auctionEndDate),\\n            \\\"E1\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageOrderPlacementAndCancelation(uint256 auctionId) {\\n        require(\\n            (block.timestamp < auctionData[auctionId].orderCancellationEndDate),\\n            \\\"E2\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageSolutionSubmission(uint256 auctionId) {\\n        {\\n            uint256 auctionEndDate = auctionData[auctionId].auctionEndDate;\\n            require(\\n                (auctionEndDate != 0 &&\\n                    block.timestamp >= auctionEndDate &&\\n                    auctionData[auctionId].clearingPriceOrder == bytes32(0)),\\n                \\\"E3\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier atStageFinished(uint256 auctionId) {\\n        require(\\n            (auctionData[auctionId].clearingPriceOrder != bytes32(0)),\\n            \\\"E4\\\"\\n        );\\n        _;\\n    }\\n\\n    mapping(uint256 => uint256) public auctionToStrategy;\\n    mapping(uint256 => uint256) public referralFeeNumerator;\\n    uint256 feeNumerator = 20;\\n    mapping(uint256 => mapping(bytes32 => string)) public referrals;\\n    IReferralRewardManager public referralRewardManager;\\n    mapping(uint256 => IterableOrderedOrderSet.Data) internal sellOrders;\\n    mapping(uint256 => AuctionData) public auctionData;\\n\\n    IdToAddressBiMap.Data private registeredUsers;\\n    uint64 public numUsers;\\n    uint256 public auctionCounter;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n    uint64 public feeReceiverUserId = 1;\\n\\n    IStrategyManager strategyManager;\\n\\n    constructor(\\n        IReferralRewardManager _referralRewardManager,\\n        IStrategyManager _strategyManager\\n    ) Ownable() {\\n        require((address(_referralRewardManager) != address(0)), \\\"E5\\\");\\n        referralRewardManager = _referralRewardManager;\\n        strategyManager = _strategyManager;\\n    }\\n\\n    function setFeeParameters(\\n        uint256 auctionId,\\n        uint256 newFeeNumerator,\\n        address newfeeReceiverAddress\\n    ) public onlyOwner {\\n        require((newFeeNumerator <= 20), \\\"E6\\\");\\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\\n        feeNumerator = newFeeNumerator;\\n    }\\n\\n    function initiateAuction(\\n        InitParams memory params\\n    ) public returns (uint256) {\\n        // withdraws sellAmount + fees\\n        if (params.strategyId != 0) {\\n            params._auctioningToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                params\\n                    ._auctionedSellAmount\\n                    .mul(FEE_DENOMINATOR.add(feeNumerator))\\n                    .div(FEE_DENOMINATOR)\\n            );\\n        }\\n        auctionCounter = auctionCounter.add(1);\\n        if (params.strategyId > 1) {\\n            StrategyData memory strategy = strategyManager.getStrategy(\\n                params.strategyId\\n            );\\n            require(strategy.enabled, \\\"E7\\\");\\n            strategy.strategyContract.init(\\n                auctionCounter,\\n                address(params._auctioningToken),\\n                params._strategyInitParams\\n            );\\n        }\\n\\n        require((params._referralFeeNumerator <= 100), \\\"E8\\\");\\n        require((params._auctionedSellAmount > 0), \\\"E9\\\");\\n        require((params._minBuyAmount > 0), \\\"E10\\\");\\n        require((params.minimumBiddingAmountPerOrder > 0), \\\"E11\\\");\\n        require(\\n            (params.orderCancellationEndDate <= params.auctionEndDate),\\n            \\\"E12\\\"\\n        );\\n        require((params.auctionEndDate > block.timestamp), \\\"E13\\\");\\n        require(\\n            ((params.strategyId == 0 && msg.sender == owner()) ||\\n                params.strategyId > 0),\\n            \\\"E14\\\"\\n        );\\n        sellOrders[auctionCounter].initializeEmptyList();\\n        uint64 userId = getUserId(msg.sender);\\n        auctionData[auctionCounter] = AuctionData(\\n            params._auctioningToken,\\n            params._biddingToken,\\n            params.orderCancellationEndDate,\\n            params.auctionEndDate,\\n            IterableOrderedOrderSet.encodeOrder(\\n                userId,\\n                params._minBuyAmount,\\n                params._auctionedSellAmount\\n            ),\\n            params.minimumBiddingAmountPerOrder,\\n            0,\\n            IterableOrderedOrderSet.QUEUE_START,\\n            bytes32(0),\\n            0,\\n            false,\\n            params.minFundingThreshold\\n        );\\n        auctionToStrategy[auctionCounter] = params.strategyId;\\n        referralFeeNumerator[auctionCounter] = params._referralFeeNumerator;\\n        emit NewAuction(\\n            auctionCounter,\\n            params._auctioningToken,\\n            params._biddingToken,\\n            params.orderCancellationEndDate,\\n            params.auctionEndDate,\\n            userId,\\n            params._auctionedSellAmount,\\n            params._minBuyAmount,\\n            params.minimumBiddingAmountPerOrder,\\n            params.minFundingThreshold\\n        );\\n        return auctionCounter;\\n    }\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] calldata _minBuyAmounts,\\n        uint96[] calldata _sellAmounts,\\n        bytes32[] calldata _prevSellOrders,\\n        string calldata referralCode\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\n        return\\n            _placeSellOrders(\\n                auctionId,\\n                _minBuyAmounts,\\n                _sellAmounts,\\n                _prevSellOrders,\\n                msg.sender,\\n                referralCode\\n            );\\n    }\\n\\n    function placeSellOrdersOnBehalf(\\n        uint256 auctionId,\\n        uint96[] calldata _minBuyAmounts,\\n        uint96[] calldata _sellAmounts,\\n        bytes32[] calldata _prevSellOrders,\\n        address orderSubmitter,\\n        string calldata referralCode\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\n        return\\n            _placeSellOrders(\\n                auctionId,\\n                _minBuyAmounts,\\n                _sellAmounts,\\n                _prevSellOrders,\\n                orderSubmitter,\\n                referralCode\\n            );\\n    }\\n\\n    function _placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        address orderSubmitter,\\n        string memory referralCode\\n    ) internal returns (uint64 userId) {\\n        {\\n            (\\n                ,\\n                uint96 buyAmountOfInitialAuctionOrder,\\n                uint96 sellAmountOfInitialAuctionOrder\\n            ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n            for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n                require(\\n                    _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\\n                        sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\\n                    \\\"E16\\\"\\n                );\\n            }\\n        }\\n        uint256 sumOfSellAmounts = 0;\\n        userId = getUserId(orderSubmitter);\\n        uint256 minimumBiddingAmountPerOrder = auctionData[auctionId]\\n            .minimumBiddingAmountPerOrder;\\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n            require((_minBuyAmounts[i] > 0), \\\"E15\\\");\\n            // orders should have a minimum bid size in order to limit the gas\\n            // required to compute the final price of the auction.\\n            require((_sellAmounts[i] > minimumBiddingAmountPerOrder), \\\"E17\\\");\\n            bytes32 encodedOrder = IterableOrderedOrderSet.encodeOrder(\\n                userId,\\n                _minBuyAmounts[i],\\n                _sellAmounts[i]\\n            );\\n            if (\\n                sellOrders[auctionId].insert(encodedOrder, _prevSellOrders[i])\\n            ) {\\n                if (bytes(referralCode).length != 0) {\\n                    require(\\n                        (referralRewardManager.isCodeRegistered(referralCode)),\\n                        \\\"E18\\\"\\n                    );\\n                    require(\\n                        (referralRewardManager.referralCodeOwner(\\n                            referralCode\\n                        ) != orderSubmitter),\\n                        \\\"E19\\\"\\n                    );\\n                    referrals[auctionId][encodedOrder] = referralCode;\\n                }\\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\\n                emit NewSellOrder(\\n                    auctionId,\\n                    userId,\\n                    _minBuyAmounts[i],\\n                    _sellAmounts[i],\\n                    referralCode\\n                );\\n            }\\n        }\\n        auctionData[auctionId].biddingToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            sumOfSellAmounts\\n        ); //[1]\\n    }\\n\\n    function cancelSellOrders(\\n        uint256 auctionId,\\n        bytes32[] memory _sellOrders\\n    ) public atStageOrderPlacementAndCancelation(auctionId) {\\n        uint64 userId = getUserId(msg.sender);\\n        uint256 claimableAmount = 0;\\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\\n            // Note: we keep the back pointer of the deleted element so that\\n            // it can be used as a reference point to insert a new node.\\n            delete referrals[auctionId][_sellOrders[i]];\\n            bool success = sellOrders[auctionId].removeKeepHistory(\\n                _sellOrders[i]\\n            );\\n            if (success) {\\n                (\\n                    uint64 userIdOfIter,\\n                    uint96 buyAmountOfIter,\\n                    uint96 sellAmountOfIter\\n                ) = _sellOrders[i].decodeOrder();\\n                require((userIdOfIter == userId), \\\"E22\\\");\\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\\n                emit CancellationSellOrder(\\n                    auctionId,\\n                    userId,\\n                    buyAmountOfIter,\\n                    sellAmountOfIter\\n                );\\n            }\\n        }\\n        auctionData[auctionId].biddingToken.safeTransfer(\\n            msg.sender,\\n            claimableAmount\\n        ); //[2]\\n    }\\n\\n    function precalculateSellAmountSum(\\n        uint256 auctionId,\\n        uint256 iterationSteps\\n    ) public atStageSolutionSubmission(auctionId) {\\n        (, , uint96 auctioneerSellAmount) = auctionData[auctionId]\\n            .initialAuctionOrder\\n            .decodeOrder();\\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\\n        for (uint256 i = 0; i < iterationSteps; i++) {\\n            iterOrder = sellOrders[auctionId].next(iterOrder);\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\\n        }\\n        require((iterOrder != IterableOrderedOrderSet.QUEUE_END), \\\"E20\\\");\\n        // it is checked that not too many iteration steps were taken:\\n        // require that the sum of SellAmounts times the price of the last order\\n        // is not more than initially sold amount\\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) = iterOrder\\n            .decodeOrder();\\n        require(\\n            sumBidAmount.mul(buyAmountOfIter) <\\n                auctioneerSellAmount.mul(sellAmountOfIter),\\n            \\\"E21\\\"\\n        );\\n        auctionData[auctionId].interimSumBidAmount = sumBidAmount;\\n        auctionData[auctionId].interimOrder = iterOrder;\\n    }\\n\\n    // @dev function settling the auction and calculating the price\\n    function settleAuction(\\n        uint256 auctionId\\n    )\\n        public\\n        atStageSolutionSubmission(auctionId)\\n        returns (bytes32 clearingOrder)\\n    {\\n        (\\n            uint64 auctioneerId,\\n            uint96 minAuctionedBuyAmount,\\n            uint96 fullAuctionedAmount\\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n        uint256 currentBidSum = auctionData[auctionId].interimSumBidAmount;\\n        bytes32 currentOrder = auctionData[auctionId].interimOrder;\\n        uint256 buyAmountOfIter;\\n        uint256 sellAmountOfIter;\\n        uint96 fillVolumeOfAuctioneerOrder = fullAuctionedAmount;\\n        // Sum order up, until fullAuctionedAmount is fully bought or queue end is reached\\n        do {\\n            bytes32 nextOrder = sellOrders[auctionId].next(currentOrder);\\n            if (nextOrder == IterableOrderedOrderSet.QUEUE_END) {\\n                break;\\n            }\\n            currentOrder = nextOrder;\\n            (, buyAmountOfIter, sellAmountOfIter) = currentOrder.decodeOrder();\\n            currentBidSum = currentBidSum.add(sellAmountOfIter);\\n        } while (\\n            currentBidSum.mul(buyAmountOfIter) <\\n                fullAuctionedAmount.mul(sellAmountOfIter)\\n        );\\n        if (\\n            currentBidSum > 0 &&\\n            currentBidSum.mul(buyAmountOfIter) >=\\n            fullAuctionedAmount.mul(sellAmountOfIter)\\n        ) {\\n            // All considered/summed orders are sufficient to close the auction fully\\n            // at price between current and previous orders.\\n            uint256 uncoveredBids = currentBidSum.sub(\\n                fullAuctionedAmount.mul(sellAmountOfIter).div(buyAmountOfIter)\\n            );\\n            if (sellAmountOfIter >= uncoveredBids) {\\n                //[13]\\n                // Auction fully filled via partial match of currentOrder\\n                uint256 sellAmountClearingOrder = sellAmountOfIter.sub(\\n                    uncoveredBids\\n                );\\n                auctionData[auctionId]\\n                    .volumeClearingPriceOrder = sellAmountClearingOrder\\n                    .toUint96();\\n                currentBidSum = currentBidSum.sub(uncoveredBids);\\n                clearingOrder = currentOrder;\\n            } else {\\n                //[14]\\n                // Auction fully filled via price strictly between currentOrder and the order\\n                // immediately before. For a proof, see the security-considerations.md\\n                currentBidSum = currentBidSum.sub(sellAmountOfIter);\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            }\\n        } else {\\n            // All considered/summed orders are not sufficient to close the auction fully at price of last order //[18]\\n            // Either a higher price must be used or auction is only partially filled\\n            if (currentBidSum > minAuctionedBuyAmount) {\\n                //[15]\\n                // Price higher than last order would fill the auction\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            } else {\\n                //[16]\\n                // Even at the initial auction price, the auction is partially filled\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    minAuctionedBuyAmount\\n                );\\n                fillVolumeOfAuctioneerOrder = currentBidSum\\n                    .mul(fullAuctionedAmount)\\n                    .div(minAuctionedBuyAmount)\\n                    .toUint96();\\n            }\\n        }\\n        auctionData[auctionId].clearingPriceOrder = clearingOrder;\\n        if (auctionData[auctionId].minFundingThreshold > currentBidSum) {\\n            auctionData[auctionId].minFundingThresholdNotReached = true;\\n        }\\n        processFeesAndAuctioneerFunds(\\n            auctionId,\\n            fillVolumeOfAuctioneerOrder,\\n            auctioneerId,\\n            fullAuctionedAmount\\n        );\\n        {\\n            (\\n                uint64 userId,\\n                uint96 buyAmount,\\n                uint96 sellAmount\\n            ) = IterableOrderedOrderSet.decodeOrder(clearingOrder);\\n            emit AuctionCleared(\\n                auctionId,\\n                userId,\\n                buyAmount,\\n                sellAmount,\\n                fillVolumeOfAuctioneerOrder,\\n                uint96(currentBidSum)\\n            );\\n        }\\n\\n        // Gas refunds\\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\\n        auctionData[auctionId].interimOrder = bytes32(0);\\n        auctionData[auctionId].interimSumBidAmount = uint256(0);\\n        auctionData[auctionId].minimumBiddingAmountPerOrder = uint256(0);\\n    }\\n\\n    function claimFromParticipantOrders(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    ) external atStageFinished(auctionId) {\\n        uint256 sumAuctioningTokenAmount;\\n        uint256 sumBiddingTokenAmount;\\n        (uint64 userId, , ) = orders[0].decodeOrder();\\n        for (uint256 index = 0; index < orders.length; index++) {\\n            (uint64 userIdOrder, , ) = orders[index].decodeOrder();\\n            require((userIdOrder == userId), \\\"E23\\\");\\n            (\\n                uint256 auctioningTokenAmount,\\n                uint256 biddingTokenAmount\\n            ) = _claimFromParticipantOrder(auctionId, orders[index]);\\n            sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\n                auctioningTokenAmount\\n            );\\n            sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\n                biddingTokenAmount\\n            );\\n        }\\n        uint256 strategyId = auctionToStrategy[auctionId];\\n        if (sumAuctioningTokenAmount > 0 && strategyId > 1) {\\n            address userAddress = registeredUsers.getAddressAt(userId);\\n            IStrategy strategy = strategyManager\\n                .getStrategy(strategyId)\\n                .strategyContract;\\n            IERC20(auctionData[auctionId].auctioningToken).transfer(\\n                address(strategy),\\n                sumAuctioningTokenAmount\\n            );\\n            strategy.execute(\\n                sumAuctioningTokenAmount,\\n                address(auctionData[auctionId].auctioningToken),\\n                auctionId,\\n                userAddress\\n            );\\n            sumAuctioningTokenAmount = 0;\\n        }\\n        sendOutTokens(\\n            auctionId,\\n            sumAuctioningTokenAmount,\\n            sumBiddingTokenAmount,\\n            userId\\n        );\\n    }\\n\\n    function _claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32 order\\n    )\\n        internal\\n        returns (\\n            uint256 sumAuctioningTokenAmount,\\n            uint256 sumBiddingTokenAmount\\n        )\\n    {\\n        require((sellOrders[auctionId].remove(order)), \\\"E24\\\");\\n        AuctionData memory auction = auctionData[auctionId];\\n        (, uint96 priceNumerator, uint96 priceDenominator) = auction\\n            .clearingPriceOrder\\n            .decodeOrder();\\n        bool minFundingThresholdNotReached = auction\\n            .minFundingThresholdNotReached;\\n        (uint64 userId, uint96 buyAmount, uint96 sellAmount) = order\\n            .decodeOrder();\\n        string memory referralCode;\\n        uint256 referralFee;\\n        if (minFundingThresholdNotReached) {\\n            //[10]\\n            sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);\\n        } else {\\n            //[23]\\n            if (order == auction.clearingPriceOrder) {\\n                //[25]\\n                sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\n                    auction.volumeClearingPriceOrder.mul(priceNumerator).div(\\n                        priceDenominator\\n                    )\\n                );\\n                sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\n                    sellAmount.sub(auction.volumeClearingPriceOrder)\\n                );\\n            } else {\\n                if (order.smallerThan(auction.clearingPriceOrder)) {\\n                    //[17]\\n                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\n                        sellAmount.mul(priceNumerator).div(priceDenominator)\\n                    );\\n                } else {\\n                    //[24]\\n                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\n                        sellAmount\\n                    );\\n                }\\n            }\\n        }\\n        {\\n            if (sumAuctioningTokenAmount > 0) {\\n                (referralCode, referralFee) = registerReferralEarnings(\\n                    sellAmount,\\n                    auctionId,\\n                    order\\n                );\\n            }\\n            sumBiddingTokenAmount = sumBiddingTokenAmount.sub(referralFee);\\n            emit ClaimedFromOrder(\\n                IClaimedFromOrder(\\n                    auctionId,\\n                    userId,\\n                    buyAmount,\\n                    sellAmount,\\n                    referralCode,\\n                    referralFee,\\n                    sumAuctioningTokenAmount,\\n                    sumBiddingTokenAmount\\n                )\\n            );\\n        }\\n    }\\n\\n    function processFeesAndAuctioneerFunds(\\n        uint256 auctionId,\\n        uint256 fillVolumeOfAuctioneerOrder,\\n        uint64 auctioneerId,\\n        uint96 fullAuctionedAmount\\n    ) internal {\\n        uint256 feeAmount = fullAuctionedAmount.mul(feeNumerator).div(\\n            FEE_DENOMINATOR\\n        );\\n        if (auctionData[auctionId].minFundingThresholdNotReached) {\\n            sendOutTokens(\\n                auctionId,\\n                fullAuctionedAmount.add(feeAmount),\\n                0,\\n                auctioneerId\\n            ); //[4]\\n        } else {\\n            //[11]\\n            (, uint96 priceNumerator, uint96 priceDenominator) = auctionData[\\n                auctionId\\n            ].clearingPriceOrder.decodeOrder();\\n            uint256 unsettledAuctionTokens = fullAuctionedAmount.sub(\\n                fillVolumeOfAuctioneerOrder\\n            );\\n            uint256 auctioningTokenAmount = unsettledAuctionTokens.add(\\n                feeAmount.mul(unsettledAuctionTokens).div(fullAuctionedAmount)\\n            );\\n            uint256 biddingTokenAmount = fillVolumeOfAuctioneerOrder\\n                .mul(priceDenominator)\\n                .div(priceNumerator);\\n            sendOutTokens(\\n                auctionId,\\n                auctioningTokenAmount,\\n                biddingTokenAmount,\\n                auctioneerId\\n            ); //[5]\\n            sendOutTokens(\\n                auctionId,\\n                feeAmount.mul(fillVolumeOfAuctioneerOrder).div(\\n                    fullAuctionedAmount\\n                ),\\n                0,\\n                feeReceiverUserId\\n            ); //[7]\\n        }\\n    }\\n\\n    function registerReferralEarnings(\\n        uint256 sellAmount,\\n        uint256 auctionId,\\n        bytes32 order\\n    ) internal returns (string memory referralCode, uint256 referralFee) {\\n        referralCode = referrals[auctionId][order];\\n        if (bytes(referralCode).length > 0) {\\n            referralFee = sellAmount.mul(referralFeeNumerator[auctionId]).div(\\n                FEE_DENOMINATOR\\n            );\\n            uint64 userId = getUserId(address(referralRewardManager));\\n            sendOutTokens(auctionId, 0, referralFee, userId);\\n            referralRewardManager.addToBalance(\\n                referralCode,\\n                referralFee,\\n                address(auctionData[auctionId].auctioningToken)\\n            );\\n        }\\n    }\\n\\n    function sendOutTokens(\\n        uint256 auctionId,\\n        uint256 auctioningTokenAmount,\\n        uint256 biddingTokenAmount,\\n        uint64 userId\\n    ) internal {\\n        address userAddress = registeredUsers.getAddressAt(userId);\\n        if (auctioningTokenAmount > 0 && auctionToStrategy[auctionId] != 0) {\\n            auctionData[auctionId].auctioningToken.safeTransfer(\\n                userAddress,\\n                auctioningTokenAmount\\n            );\\n        }\\n        if (biddingTokenAmount > 0) {\\n            auctionData[auctionId].biddingToken.safeTransfer(\\n                userAddress,\\n                biddingTokenAmount\\n            );\\n        }\\n    }\\n\\n    function registerUser(address user) public returns (uint64 userId) {\\n        numUsers = numUsers.add(1).toUint64();\\n        require((registeredUsers.insert(numUsers, user)), \\\"E25\\\");\\n        userId = numUsers;\\n        emit UserRegistration(user, userId);\\n    }\\n\\n    function getUserId(address user) public returns (uint64 userId) {\\n        if (registeredUsers.hasAddress(user)) {\\n            userId = registeredUsers.getId(user);\\n        } else {\\n            userId = registerUser(user);\\n            emit NewUser(userId, user);\\n        }\\n    }\\n\\n    function getSecondsRemainingInBatch(\\n        uint256 auctionId\\n    ) public view returns (uint256) {\\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\\n            return 0;\\n        }\\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\\n    }\\n\\n    function containsOrder(\\n        uint256 auctionId,\\n        bytes32 order\\n    ) public view returns (bool) {\\n        return sellOrders[auctionId].contains(order);\\n    }\\n}\\n\",\"keccak256\":\"0xac370841a5b6e78b7cef59ecef5fc74ed669c23fbe9c944c7db162c1ba842e0b\"},\"contracts/interfaces/IEasyAuction.sol\":{\"content\":\"pragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEasyAuction {\\n    //E1 - no longer in order placement phase\\n    //E2 - no longer in order placement and cancelation phase\\n    //E3 - Auction not in solution submission phase\\n    //E4 - Auction not yet finished\\n    //E5 - ReferralRewardManager cannot be zero address\\n    //E6 - Fee is not allowed to be set higher than 2%\\n    //E7 - Strategy is currently disabled\\n    //E8 - referral fee cannot exceed 10%\\n    //E9 - cannot auction zero tokens\\n    //E10 - tokens cannot be auctioned for free\\n    //E11 - minimumBiddingAmountPerOrder is not allowed to be zero\\n    //E12 - time periods are not configured correctly\\n    //E13 - auction end date must be in the future\\n    //E14 - Only owner can create auctions with no strategy\\n    //E15 - _minBuyAmounts must be greater than 0\\n    //E16 - limit price not better than mimimal offer\\n    //E17 - order too small\\n    //E18 - referral code not registered\\n    //E19 - referral code owner cannot be submitter\\n    //E20 - reached end of order list\\n    //E21 - too many orders summed up\\n    //E22 - Only the user can cancel his orders\\n    //E23 - only allowed to claim for same user\\n    //E24 - order is no longer claimable\\n    //E25 - User already registered\\n\\n    //structs\\n    struct IClaimedFromOrder {\\n        uint256 auctionId;\\n        uint64 userId;\\n        uint96 buyAmount;\\n        uint96 sellAmount;\\n        string referralCode;\\n        uint256 referralFee;\\n        uint256 auctioningTokenAmount;\\n        uint256 biddingTokenAmount;\\n    }\\n    struct InitParams {\\n        IERC20 _auctioningToken;\\n        IERC20 _biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        uint96 _auctionedSellAmount;\\n        uint96 _minBuyAmount;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 minFundingThreshold;\\n        uint256 _referralFeeNumerator;\\n        uint256 strategyId;\\n        bytes32[] _strategyInitParams;\\n    }\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        uint256 minFundingThreshold;\\n    }\\n\\n    //events\\n    event NewSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount,\\n        string referralCode\\n    );\\n    event CancellationSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event ClaimedFromOrder(IClaimedFromOrder params);\\n    event NewUser(uint64 indexed userId, address indexed userAddress);\\n    event NewAuction(\\n        uint256 indexed auctionId,\\n        IERC20 indexed _auctioningToken,\\n        IERC20 indexed _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint64 userId,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold\\n    );\\n    event AuctionCleared(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount,\\n        uint96 soldAuctioningTokens,\\n        uint96 soldBiddingTokens\\n    );\\n    event UserRegistration(address indexed user, uint64 userId);\\n\\n    //functions\\n    function placeSellOrdersOnBehalf(\\n        uint256 auctionId,\\n        uint96[] calldata _minBuyAmounts,\\n        uint96[] calldata _sellAmounts,\\n        bytes32[] calldata _prevSellOrders,\\n        address orderSubmitter,\\n        string calldata referralCode\\n    ) external returns (uint64 userId);\\n}\\n\",\"keccak256\":\"0x16325a8eb7b015b878ad533ed3c2790007e4a513f1413f573f81d7250826241c\"},\"contracts/interfaces/IReferralRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IReferralRewardManager {\\n    function codeToAddress(\\n        string calldata _code\\n    ) external view returns (address);\\n\\n    function addressToCode(\\n        address _account\\n    ) external view returns (string memory);\\n\\n    function registerCode(string calldata _code) external;\\n\\n    function addToBalance(\\n        string calldata referralCode,\\n        uint256 _amount,\\n        address _token\\n    ) external;\\n\\n    function isCodeRegistered(\\n        string calldata _code\\n    ) external view returns (bool);\\n\\n    function referralCodeOwner(\\n        string calldata referralCode\\n    ) external view returns (address);\\n\\n    event Withdraw(address indexed account, uint256 amount, address token);\\n    event BalanceIncrease(\\n        address indexed account,\\n        uint256 amount,\\n        address token\\n    );\\n    event CodeRegistered(address indexed account, string code);\\n}\\n\",\"keccak256\":\"0x151b9013062003ecc4b6898df0504309de25c2c59409fb96bf2f89a37ddd6ea4\",\"license\":\"MIT\"},\"contracts/libraries/IdToAddressBiMap.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n// Contract does not have test coverage, as it was nearly copied from:\\n// https://github.com/gnosis/solidity-data-structures/blob/master/contracts/libraries/IdToAddressBiMap.sol\\n// The only change is uint16 -> uint64\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary IdToAddressBiMap {\\n    struct Data {\\n        mapping(uint64 => address) idToAddress;\\n        mapping(address => uint64) addressToId;\\n    }\\n\\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\\n        return self.idToAddress[id + 1] != address(0);\\n    }\\n\\n    function hasAddress(\\n        Data storage self,\\n        address addr\\n    ) internal view returns (bool) {\\n        return self.addressToId[addr] != 0;\\n    }\\n\\n    function getAddressAt(\\n        Data storage self,\\n        uint64 id\\n    ) internal view returns (address) {\\n        require(hasId(self, id), \\\"Must have ID to get Address\\\");\\n        return self.idToAddress[id + 1];\\n    }\\n\\n    function getId(\\n        Data storage self,\\n        address addr\\n    ) internal view returns (uint64) {\\n        require(hasAddress(self, addr), \\\"Must have Address to get ID\\\");\\n        return self.addressToId[addr] - 1;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        uint64 id,\\n        address addr\\n    ) internal returns (bool) {\\n        require(addr != address(0), \\\"Cannot insert zero address\\\");\\n        require(id != type(uint64).max, \\\"Cannot insert max uint64\\\");\\n        // Ensure bijectivity of the mappings\\n        if (\\n            self.addressToId[addr] != 0 ||\\n            self.idToAddress[id + 1] != address(0)\\n        ) {\\n            return false;\\n        }\\n        self.idToAddress[id + 1] = addr;\\n        self.addressToId[addr] = id + 1;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xe0c169c67d4db4946616fb34fa1690bf7a9616094dc77ace855531f3c68da4a7\"},\"contracts/libraries/IterableOrderedOrderSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary IterableOrderedOrderSet {\\n    using SafeMath for uint96;\\n    using IterableOrderedOrderSet for bytes32;\\n\\n    // represents smallest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_START =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    // represents highest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_END =\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\n\\n    /// The struct is used to implement a modified version of a doubly linked\\n    /// list with sorted elements. The list starts from QUEUE_START to\\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\\n    /// Nodes can be added or removed.\\n    ///\\n    /// `next` and `prev` have a different role. The list is supposed to be\\n    /// traversed with `next`. If `next` is empty, the node is not part of the\\n    /// list. However, `prev` might be set for elements that are not in the\\n    /// list, which is why it should not be used for traversing. Having a `prev`\\n    /// set for elements not in the list is used to keep track of the history of\\n    /// the position in the list of a removed element.\\n    struct Data {\\n        mapping(bytes32 => bytes32) nextMap;\\n        mapping(bytes32 => bytes32) prevMap;\\n    }\\n\\n    struct Order {\\n        uint64 owner;\\n        uint96 buyAmount;\\n        uint96 sellAmount;\\n    }\\n\\n    function initializeEmptyList(Data storage self) internal {\\n        self.nextMap[QUEUE_START] = QUEUE_END;\\n        self.prevMap[QUEUE_END] = QUEUE_START;\\n    }\\n\\n    function isEmpty(Data storage self) internal view returns (bool) {\\n        return self.nextMap[QUEUE_START] == QUEUE_END;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        bytes32 elementToInsert,\\n        bytes32 elementBeforeNewOne\\n    ) internal returns (bool) {\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\n        require(denominator != uint96(0), \\\"Inserting zero is not supported\\\");\\n        require(\\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\\n            \\\"Inserting element is not valid\\\"\\n        );\\n        if (contains(self, elementToInsert)) {\\n            return false;\\n        }\\n        if (\\n            elementBeforeNewOne != QUEUE_START &&\\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\\n        ) {\\n            return false;\\n        }\\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\\n            return false;\\n        }\\n\\n        // `elementBeforeNewOne` might have been removed during the time it\\n        // took to the transaction calling this function to be mined, so\\n        // the new order cannot be appended directly to this. We follow the\\n        // history of previous links backwards until we find an element in\\n        // the list from which to start our search.\\n        // Note that following the link backwards returns elements that are\\n        // before `elementBeforeNewOne` in sorted order.\\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\\n        }\\n\\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\\n        // largest entry that is smaller than the element to insert.\\n        bytes32 previous;\\n        bytes32 current = elementBeforeNewOne;\\n        do {\\n            previous = current;\\n            current = self.nextMap[current];\\n        } while (current.smallerThan(elementToInsert));\\n        // Note: previous < elementToInsert < current\\n        self.nextMap[previous] = elementToInsert;\\n        self.prevMap[current] = elementToInsert;\\n        self.prevMap[elementToInsert] = previous;\\n        self.nextMap[elementToInsert] = current;\\n\\n        return true;\\n    }\\n\\n    /// The element is removed from the linked list, but the node retains\\n    /// information on which predecessor it had, so that a node in the chain\\n    /// can be reached by following the predecessor chain of deleted elements.\\n    function removeKeepHistory(\\n        Data storage self,\\n        bytes32 elementToRemove\\n    ) internal returns (bool) {\\n        if (!contains(self, elementToRemove)) {\\n            return false;\\n        }\\n        bytes32 previousElement = self.prevMap[elementToRemove];\\n        bytes32 nextElement = self.nextMap[elementToRemove];\\n        self.nextMap[previousElement] = nextElement;\\n        self.prevMap[nextElement] = previousElement;\\n        self.nextMap[elementToRemove] = bytes32(0);\\n        return true;\\n    }\\n\\n    /// Remove an element from the chain, clearing all related storage.\\n    /// Note that no elements should be inserted using as a reference point a\\n    /// node deleted after calling `remove`, since an element in the `prev`\\n    /// chain might be missing.\\n    function remove(\\n        Data storage self,\\n        bytes32 elementToRemove\\n    ) internal returns (bool) {\\n        bool result = removeKeepHistory(self, elementToRemove);\\n        if (result) {\\n            self.prevMap[elementToRemove] = bytes32(0);\\n        }\\n        return result;\\n    }\\n\\n    function contains(\\n        Data storage self,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        if (value == QUEUE_START) {\\n            return false;\\n        }\\n        // Note: QUEUE_END is not contained in the list since it has no\\n        // successor.\\n        return self.nextMap[value] != bytes32(0);\\n    }\\n\\n    // @dev orders are ordered by\\n    // 1. their price - buyAmount/sellAmount\\n    // 2. by the sellAmount\\n    // 3. their userId,\\n    function smallerThan(\\n        bytes32 orderLeft,\\n        bytes32 orderRight\\n    ) internal pure returns (bool) {\\n        (\\n            uint64 userIdLeft,\\n            uint96 priceNumeratorLeft,\\n            uint96 priceDenominatorLeft\\n        ) = decodeOrder(orderLeft);\\n        (\\n            uint64 userIdRight,\\n            uint96 priceNumeratorRight,\\n            uint96 priceDenominatorRight\\n        ) = decodeOrder(orderRight);\\n\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return true;\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return false;\\n\\n        if (priceNumeratorLeft < priceNumeratorRight) return true;\\n        if (priceNumeratorLeft > priceNumeratorRight) return false;\\n        require(\\n            userIdLeft != userIdRight,\\n            \\\"user is not allowed to place same order twice\\\"\\n        );\\n        if (userIdLeft < userIdRight) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function first(Data storage self) internal view returns (bytes32) {\\n        require(!isEmpty(self), \\\"Trying to get first from empty set\\\");\\n        return self.nextMap[QUEUE_START];\\n    }\\n\\n    function next(\\n        Data storage self,\\n        bytes32 value\\n    ) internal view returns (bytes32) {\\n        require(value != QUEUE_END, \\\"Trying to get next of last element\\\");\\n        bytes32 nextElement = self.nextMap[value];\\n        require(\\n            nextElement != bytes32(0),\\n            \\\"Trying to get next of non-existent element\\\"\\n        );\\n        return nextElement;\\n    }\\n\\n    function decodeOrder(\\n        bytes32 _orderData\\n    )\\n        internal\\n        pure\\n        returns (uint64 userId, uint96 buyAmount, uint96 sellAmount)\\n    {\\n        // Note: converting to uint discards the binary digits that do not fit\\n        // the type.\\n        userId = uint64(uint256(_orderData) >> 192);\\n        buyAmount = uint96(uint256(_orderData) >> 96);\\n        sellAmount = uint96(uint256(_orderData));\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x289a1df721d471fa80202750f05c29d52a395230686bc0143dd316c090e6f368\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\\n */\\nlibrary SafeCast {\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value < 2 ** 96, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2 ** 64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n}\\n\",\"keccak256\":\"0xf75599688328b30ca6de4b719c25ce1bb0278da4b1535ef857746df852f5149f\",\"license\":\"MIT\"},\"contracts/strategies/interfaces/IStrategy.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\ninterface IStrategy {\\n    function execute(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _auctionId,\\n        address _user\\n    ) external;\\n\\n    function init(\\n        uint256 _auctionId,\\n        address _token,\\n        bytes32[] memory initParams\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1e3dd4967b8b3cbd50f145950dbb34e52891bf1a8ada2c03adfa5061c9e78c3b\"},\"contracts/strategies/interfaces/IStrategyManager.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"./IStrategy.sol\\\";\\n\\nstruct StrategyData {\\n    IStrategy strategyContract;\\n    bool enabled;\\n}\\n\\ninterface IStrategyManager {\\n    event StrategyCreated(uint256 _index, address _strategy);\\n    event StrategyDisabled(uint256 _index, address _strategy);\\n    event StrategyEnabled(uint256 _index, address _strategy);\\n\\n    function getStrategy(uint256 _id) external returns (StrategyData memory);\\n}\\n\",\"keccak256\":\"0xadfaafe5e38a7a86d2fdd90798425b45a9d92bc81f289948d9f0b14ab0082bce\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063639b02d7116100c35780638da5cb5b1161007c5780638da5cb5b1461040a578063a2b2a3161461041b578063a7e766441461042e578063ba8fe75f14610437578063d73792a91461044a578063f2fde38b1461045357600080fd5b8063639b02d71461036e57806363c699a41461038e578063715018a6146103b15780637aea2424146103b95780637ed18b70146103cc578063801140c4146103df57600080fd5b80632e993611116101155780632e993611146102075780633e12905f1461021a578063414d3ecf1461022f57806355fc62d2146102425780635825313c1461033b5780635cefb2911461035b57600080fd5b8063083fa53e1461015d57806315d37b4b1461018d5780631656151e146101ae57806319a50f49146101ce5780632199d5cd146101e15780632b956ff7146101f4575b600080fd5b61017061016b3660046132ee565b610466565b6040516001600160401b0390911681526020015b60405180910390f35b6101a061019b3660046133bd565b610596565b604051908152602001610184565b6101c16101bc3660046133d6565b6105d9565b6040516101849190613448565b600a54610170906001600160401b031681565b6101706101ef36600461347b565b61067e565b61017061020236600461347b565b610753565b6101a06102153660046133bd565b6107d6565b61022d6102283660046133d6565b610b52565b005b61022d61023d366004613498565b610cf8565b6102cc6102503660046133bd565b600760208190526000918252604090912080546001820154600283015460038401546004850154600586015460068701549787015460088801546009890154600a909901546001600160a01b039889169a97909816989597949693959294919290916001600160601b0382169160ff600160601b90910416908c565b604080516001600160a01b039d8e1681529c909b1660208d0152998b019890985260608a0196909652608089019490945260a088019290925260c087015260e08601526101008501526001600160601b0316610120840152151561014083015261016082015261018001610184565b6101a06103493660046133bd565b60016020526000908152604090205481565b600c54610170906001600160401b031681565b6101a061037c3660046133bd565b60026020526000908152604090205481565b6103a161039c3660046133d6565b610d3d565b6040519015158152602001610184565b61022d610d5c565b61022d6103c736600461359f565b610d70565b61022d6103da36600461359f565b611083565b6005546103f2906001600160a01b031681565b6040516001600160a01b039091168152602001610184565b6000546001600160a01b03166103f2565b6101a06104293660046135fc565b611287565b6101a0600b5481565b6101706104453660046136f1565b6118f2565b6101a06103e881565b61022d61046136600461347b565b611a2f565b6000898152600760205260408120600301548a9042106104b25760405162461bcd60e51b8152602060048201526002602482015261453160f01b60448201526064015b60405180910390fd5b6105878b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525050604080516020601f8d018190048102820181019092528b815233935091508b908b9081908401838280828437600092019190915250611aa892505050565b9b9a5050505050505050505050565b6000818152600760205260408120600301544211156105b757506000919050565b6000828152600760205260409020600301546105d39042611f63565b92915050565b6004602090815260009283526040808420909152908252902080546105fd906137d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610629906137d4565b80156106765780601f1061064b57610100808354040283529160200191610676565b820191906000526020600020905b81548152906001019060200180831161065957829003601f168201915b505050505081565b600a546000906106a19061069c906001600160401b03166001611f6f565b611f7b565b600a805467ffffffffffffffff19166001600160401b039290921691821790556106ce9060089084611fe3565b6107005760405162461bcd60e51b815260206004820152600360248201526245323560e81b60448201526064016104a9565b50600a546040516001600160401b03909116808252906001600160a01b038316907f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c9060200160405180910390a2919050565b6001600160a01b0381166000908152600960205260408120546001600160401b031615610785576105d36008836121a0565b61078e8261067e565b9050816001600160a01b0316816001600160401b03167f969d438b19b6b5fb3c0d3c6f16867e519fcec4233799d6be29d1c00f2045ba2660405160405180910390a35b919050565b600081815260076020526040812060030154829080158015906107f95750804210155b80156108145750600082815260076020526040902060080154155b6108455760405162461bcd60e51b8152602060048201526002602482015261453360f01b60448201526064016104a9565b506000838152600760208190526040822060048101546006820154919092015460c083901c93606084901c9392919080845b60008b815260066020526040812061088f9086612240565b90506001600160601b0381016108a557506108ee565b93506001600160601b03606085901c8116935084169150836108c78684611f6f565b95506108de90506001600160601b03871683612312565b6108e88685612312565b10610877575b600085118015610919575061090c6001600160601b03871683612312565b6109168685612312565b10155b156109d95760006109476109408561093a6001600160601b038b1687612312565b9061231e565b8790611f63565b90508083106109b057600061095c8483611f63565b90506109678161232a565b60008e815260076020526040902060090180546bffffffffffffffffffffffff19166001600160601b03929092169190911790556109a58783611f63565b9650859b50506109d3565b6109ba8684611f63565b95506109d06000886109cb8961232a565b61238e565b9a505b50610a42565b866001600160601b0316851115610a00576109f96000876109cb8861232a565b9950610a42565b610a0c6000878961238e565b9950610a3f610a3a886001600160601b031661093a896001600160601b03168961231290919063ffffffff16565b61232a565b90505b60008b8152600760205260409020600881018b9055600a0154851015610a855760008b8152600760205260409020600901805460ff60601b1916600160601b1790555b610a9a8b826001600160601b03168a896123d9565b6000808060c08d901c60608e901c8e604080516001600160601b0380851682528084166020830152808a1692820192909252908c16606082015292955090935091506001600160401b038416908f907fc56baaf7f9ced7b333accf3ba9c678d3ca955eb354691e6592660740e938d07a9060800160405180910390a350505060009a8b5250506007602081905260408a20600481018b90559081018a9055600681018a90556005019890985550949695505050505050565b60008281526007602052604090206003015482908015801590610b755750804210155b8015610b905750600082815260076020526040902060080154155b610bc15760405162461bcd60e51b8152602060048201526002602482015261453360f01b60448201526064016104a9565b506000838152600760208190526040822060048101546006820154919092015491929091905b85811015610c33576000878152600660205260409020610c079083612240565b915081610c1d846001600160601b038316611f6f565b9350508080610c2b90613824565b915050610be7565b506001600160601b038101610c705760405162461bcd60e51b815260206004820152600360248201526204532360ec1b60448201526064016104a9565b606081901c81610c8c6001600160601b03868116908316612312565b610c9f856001600160601b038516612312565b10610cd25760405162461bcd60e51b815260206004820152600360248201526245323160e81b60448201526064016104a9565b505060009586526007602081905260409096206006810192909255940193909355505050565b610d0061250d565b6014821115610d365760405162461bcd60e51b8152602060048201526002602482015261229b60f11b60448201526064016104a9565b5060035550565b6000828152600660205260408120610d559083612567565b9392505050565b610d6461250d565b610d6e6000612590565b565b6000828152600760205260409020600801548290610db55760405162461bcd60e51b8152602060048201526002602482015261114d60f21b60448201526064016104a9565b6000806000610de785600081518110610dd057610dd061383d565b602002602001015160c081901c91606082901c9190565b5050905060005b8551811015610eb2576000610e0e878381518110610dd057610dd061383d565b50509050826001600160401b0316816001600160401b031614610e595760405162461bcd60e51b815260206004820152600360248201526245323360e81b60448201526064016104a9565b600080610e7f8a8a8681518110610e7257610e7261383d565b60200260200101516125e0565b9092509050610e8e8783611f6f565b9650610e9a8682611f6f565b95505050508080610eaa90613824565b915050610dee565b506000868152600160205260409020548315801590610ed15750600181115b1561106e576000610ee36008846128e5565b600c546040516333f0330d60e21b815260048101859052919250600091600160401b9091046001600160a01b03169063cfc0cc349060240160408051808303816000875af1158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5d9190613863565b5160008a8152600760205260409081902054905163a9059cbb60e01b81526001600160a01b038084166004830152602482018a905292935091169063a9059cbb906044016020604051808303816000875af1158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe491906138bf565b506000898152600760205260409081902054905163b1c7387760e01b8152600481018890526001600160a01b039182166024820152604481018b905283821660648201529082169063b1c7387790608401600060405180830381600087803b15801561104f57600080fd5b505af1158015611063573d6000803e3d6000fd5b505050506000955050505b61107a87858585612975565b50505050505050565b600082815260076020526040902060020154829042106110ca5760405162461bcd60e51b8152602060048201526002602482015261229960f11b60448201526064016104a9565b60006110d533610753565b90506000805b84518110156112595760046000878152602001908152602001600020600086838151811061110b5761110b61383d565b60200260200101518152602001908152602001600020600061112d9190613218565b600061116d8683815181106111445761114461383d565b6020026020010151600660008a81526020019081526020016000206129f590919063ffffffff16565b9050801561124657600080600061118f898681518110610dd057610dd061383d565b925092509250866001600160401b0316836001600160401b0316146111dc5760405162461bcd60e51b815260206004820152600360248201526222991960e91b60448201526064016104a9565b6111ef866001600160601b038316611f6f565b604080516001600160601b038086168252841660208201529197506001600160401b038916918c917f7edae327fe79804b2f38bd490d874a0d188d3ae8911b303205abe47400086ac4910160405180910390a35050505b508061125181613824565b9150506110db565b50600085815260076020526040902060010154611280906001600160a01b03163383612a4a565b5050505050565b60008161012001516000146112e2576112e233306112cf6103e861093a6112bb6003546103e8611f6f90919063ffffffff16565b60808901516001600160601b031690612312565b85516001600160a01b0316929190612ab2565b600b546112f0906001611f6f565b600b556101208201516001101561142657600c546101208301516040516333f0330d60e21b81526004810191909152600091600160401b90046001600160a01b03169063cfc0cc349060240160408051808303816000875af115801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e9190613863565b905080602001516113b65760405162461bcd60e51b8152602060048201526002602482015261453760f01b60448201526064016104a9565b8051600b54845161014086015160405163b88d7f2f60e01b81526001600160a01b039094169363b88d7f2f936113f293909290916004016138da565b600060405180830381600087803b15801561140c57600080fd5b505af1158015611420573d6000803e3d6000fd5b50505050505b606482610100015111156114615760405162461bcd60e51b815260206004820152600260248201526108a760f31b60448201526064016104a9565b600082608001516001600160601b0316116114a35760405162461bcd60e51b8152602060048201526002602482015261453960f01b60448201526064016104a9565b60008260a001516001600160601b0316116114e65760405162461bcd60e51b815260206004820152600360248201526204531360ec1b60448201526064016104a9565b60008260c00151116115205760405162461bcd60e51b815260206004820152600360248201526245313160e81b60448201526064016104a9565b81606001518260400151111561155e5760405162461bcd60e51b815260206004820152600360248201526222989960e91b60448201526064016104a9565b428260600151116115975760405162461bcd60e51b815260206004820152600360248201526245313360e81b60448201526064016104a9565b6101208201511580156115b457506000546001600160a01b031633145b806115c457506000826101200151115b6115f65760405162461bcd60e51b8152602060048201526003602482015262114c4d60ea1b60448201526064016104a9565b600b54600090815260066020908152604080832060018085528184528285206bfffffffffffffffffffffffe1990819055855290810190925282205561163b33610753565b905060405180610180016040528084600001516001600160a01b0316815260200184602001516001600160a01b031681526020018460400151815260200184606001518152602001611696838660a00151876080015161238e565b81526020018460c00151815260200160008152602001600160001b81526020016000801b815260200160006001600160601b031681526020016000151581526020018460e0015181525060076000600b54815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816001600160601b0302191690836001600160601b0316021790555061014082015181600901600c6101000a81548160ff02191690831515021790555061016082015181600a015590505082610120015160016000600b5481526020019081526020016000208190555082610100015160026000600b5481526020019081526020016000208190555082602001516001600160a01b031683600001516001600160a01b0316600b547ffec6eef7a5ce1cc0753a6fa3f13dafcf6416133a964f6566edb8574b7a759b09866040015187606001518689608001518a60a001518b60c001518c60e001516040516118e0979695949392919096875260208701959095526001600160401b039390931660408601526001600160601b03918216606086015216608084015260a083015260c082015260e00190565b60405180910390a45050600b54919050565b60008a8152600760205260408120600301548b9042106119395760405162461bcd60e51b8152602060048201526002602482015261453160f01b60448201526064016104a9565b611a1f8c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020601f8d018190048102820181019092528b81528d935091508b908b9081908401838280828437600092019190915250611aa892505050565b9c9b505050505050505050505050565b611a3761250d565b6001600160a01b038116611a9c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a9565b611aa581612590565b50565b600086815260076020526040812060040154606081901c90825b8851811015611b8c57611b09888281518110611ae057611ae061383d565b60200260200101516001600160601b0316836001600160601b031661231290919063ffffffff16565b611b47846001600160601b03168b8481518110611b2857611b2861383d565b60200260200101516001600160601b031661231290919063ffffffff16565b10611b7a5760405162461bcd60e51b815260206004820152600360248201526222989b60e91b60448201526064016104a9565b80611b8481613824565b915050611ac2565b5050506000611b9a84610753565b6000898152600760205260408120600501549193505b8851811015611f2f576000898281518110611bcd57611bcd61383d565b60200260200101516001600160601b031611611c115760405162461bcd60e51b815260206004820152600360248201526245313560e81b60448201526064016104a9565b81888281518110611c2457611c2461383d565b60200260200101516001600160601b031611611c685760405162461bcd60e51b815260206004820152600360248201526245313760e81b60448201526064016104a9565b6000611ca7858b8481518110611c8057611c8061383d565b60200260200101518b8581518110611c9a57611c9a61383d565b602002602001015161238e565b9050611ce981898481518110611cbf57611cbf61383d565b6020026020010151600660008f8152602001908152602001600020612af09092919063ffffffff16565b15611f1c57855115611e6c5760055460405163951f18ab60e01b81526001600160a01b039091169063951f18ab90611d25908990600401613448565b602060405180830381865afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6691906138bf565b611d985760405162461bcd60e51b815260206004820152600360248201526208a62760eb1b60448201526064016104a9565b60055460405163eaf928b960e01b81526001600160a01b03808a1692169063eaf928b990611dca908a90600401613448565b602060405180830381865afa158015611de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0b9190613939565b6001600160a01b031603611e475760405162461bcd60e51b815260206004820152600360248201526245313960e81b60448201526064016104a9565b60008b81526004602090815260408083208484529091529020611e6a87826139a4565b505b611ea1898381518110611e8157611e8161383d565b60200260200101516001600160601b031685611f6f90919063ffffffff16565b9350846001600160401b03168b7fe86f1d514a4a988ca372aed576b30558ff6ae931da670be97c9964caad19c5f48c8581518110611ee157611ee161383d565b60200260200101518c8681518110611efb57611efb61383d565b60200260200101518a604051611f1393929190613a63565b60405180910390a35b5080611f2781613824565b915050611bb0565b50600089815260076020526040902060010154611f57906001600160a01b0316333085612ab2565b50509695505050505050565b6000610d558284613a98565b6000610d558284613aab565b6000600160401b8210611fdf5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016104a9565b5090565b60006001600160a01b03821661203b5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f7420696e73657274207a65726f206164647265737300000000000060448201526064016104a9565b67fffffffffffffffe196001600160401b0384160161209c5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420696e73657274206d61782075696e743634000000000000000060448201526064016104a9565b6001600160a01b03821660009081526001850160205260409020546001600160401b03161515806120fd5750600084816120d7866001613abe565b6001600160401b031681526020810191909152604001600020546001600160a01b031614155b1561210a57506000610d55565b81846000612119866001613abe565b6001600160401b03168152602081019190915260400160002080546001600160a01b0319166001600160a01b039290921691909117905561215b836001613abe565b6001600160a01b038316600090815260018681016020526040909120805467ffffffffffffffff19166001600160401b03939093169290921790915590509392505050565b6001600160a01b03811660009081526001830160205260408120546001600160401b03166122105760405162461bcd60e51b815260206004820152601b60248201527f4d7573742068617665204164647265737320746f20676574204944000000000060448201526064016104a9565b6001600160a01b03821660009081526001848101602052604090912054610d5591906001600160401b0316613ae5565b60006001600160601b0382016122a35760405162461bcd60e51b815260206004820152602260248201527f547279696e6720746f20676574206e657874206f66206c61737420656c656d656044820152611b9d60f21b60648201526084016104a9565b60008281526020849052604090205480610d555760405162461bcd60e51b815260206004820152602a60248201527f547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656044820152691b9d08195b195b595b9d60b21b60648201526084016104a9565b6000610d558284613b05565b6000610d558284613b1c565b6000600160601b8210611fdf5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b60648201526084016104a9565b60006001600160601b0382166123c76bffffffffffffffffffffffff60601b606086901b166001600160c01b031960c088901b16613aab565b6123d19190613aab565b949350505050565b60006123ff6103e861093a600354856001600160601b031661231290919063ffffffff16565b600086815260076020526040902060090154909150600160601b900460ff1615612447576124428561243a6001600160601b03851684611f6f565b600086612975565b611280565b600085815260076020526040812060080154606081901c916124726001600160601b03861688611f63565b905060006124976124906001600160601b03881661093a8886612312565b8390611f6f565b905060006124c4856001600160601b031661093a866001600160601b03168c61231290919063ffffffff16565b90506124d28a83838b612975565b6125018a6124ed6001600160601b038a1661093a8a8e612312565b600c546000906001600160401b0316612975565b50505050505050505050565b6000546001600160a01b03163314610d6e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104a9565b6000600019820161257a575060006105d3565b5060009081526020919091526040902054151590565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082815260066020526040812081906125fa9084612c9f565b61262c5760405162461bcd60e51b8152602060048201526003602482015262114c8d60ea1b60448201526064016104a9565b600084815260076020818152604080842081516101808101835281546001600160a01b039081168252600183015416938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c08301529182015460e08201526008820154610100820181905260098301546001600160601b03811661012084015260ff600160601b909104161515610140830152600a90920154610160820152919081906126f79060c081901c91606082901c9190565b6101408601519194509250905060c087901c606088811c908990600085156127335761272c8a6001600160601b038516611f6f565b995061281e565b8861010001518c036127b657612780612779886001600160601b031661093a8b6001600160601b03168d61012001516001600160601b031661231290919063ffffffff16565b8c90611f6f565b9a5061272c6127af8a61012001516001600160601b0316856001600160601b0316611f6390919063ffffffff16565b8b90611f6f565b6101008901516127c7908d90612ccb565b1561280857612801612779886001600160601b031661093a8b6001600160601b0316876001600160601b031661231290919063ffffffff16565b9a5061281e565b61281b8a6001600160601b038516611f6f565b99505b8a1561283e57612838836001600160601b03168e8e612e67565b90925090505b6128488a82611f63565b99507f46fe9103ac30a862896b36f24f2466c9e318af942420da72a3427c9e632aff4c6040518061010001604052808f8152602001876001600160401b03168152602001866001600160601b03168152602001856001600160601b031681526020018481526020018381526020018d81526020018c8152506040516128cd9190613b3e565b60405180910390a15050505050505050509250929050565b60006128f18383612fe4565b61293d5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520494420746f206765742041646472657373000000000060448201526064016104a9565b82600061294b846001613abe565b6001600160401b031681526020810191909152604001600020546001600160a01b03169392505050565b60006129826008836128e5565b90506000841180156129a1575060008581526001602052604090205415155b156129c9576000858152600760205260409020546129c9906001600160a01b03168286612a4a565b821561128057600085815260076020526040902060010154611280906001600160a01b03168285612a4a565b6000612a018383612567565b612a0d575060006105d3565b5060008181526001838101602081815260408085205487835281862080548288528388208190558752938352908520559383529390925290915590565b6040516001600160a01b038316602482015260448101829052612aad90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613020565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612aea9085906323b872dd60e01b90608401612a76565b50505050565b6000826001600160601b038116612b495760405162461bcd60e51b815260206004820152601f60248201527f496e73657274696e67207a65726f206973206e6f7420737570706f727465640060448201526064016104a9565b60018414801590612b6757506bfffffffffffffffffffffffe198414155b612bb35760405162461bcd60e51b815260206004820152601e60248201527f496e73657274696e6720656c656d656e74206973206e6f742076616c6964000060448201526064016104a9565b612bbd8585612567565b15612bcc576000915050610d55565b60018314801590612beb57506000838152600186016020526040902054155b15612bfa576000915050610d55565b612c048385612ccb565b612c12576000915050610d55565b5b600083815260208690526040902054612c3e5760009283526001850160205260409092205491612c13565b6000835b600081815260208890526040902054909150612c5e8187612ccb565b612c42576000828152602088815260408083208990558383526001808b0183528184208a905589845281842095909555908990529020559150509392505050565b600080612cac84846129f5565b90508015610d5557600092835260019390930160205250604081205590565b600060c083811c90606085811c9186919086901c9086901c86612cfa6001600160601b03808416908616612312565b612d106001600160601b03878116908416612312565b1015612d2557600196505050505050506105d3565b612d3b6001600160601b03838116908616612312565b612d516001600160601b03878116908416612312565b1115612d6657600096505050505050506105d3565b816001600160601b0316856001600160601b03161015612d8f57600196505050505050506105d3565b816001600160601b0316856001600160601b03161115612db857600096505050505050506105d3565b826001600160401b0316866001600160401b031603612e2f5760405162461bcd60e51b815260206004820152602d60248201527f75736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d60448201526c65206f7264657220747769636560981b60648201526084016104a9565b826001600160401b0316866001600160401b03161015612e5857600196505050505050506105d3565b50600098975050505050505050565b6000828152600460209081526040808320848452909152812080546060929190612e90906137d4565b80601f0160208091040260200160405190810160405280929190818152602001828054612ebc906137d4565b8015612f095780601f10612ede57610100808354040283529160200191612f09565b820191906000526020600020905b815481529060010190602001808311612eec57829003601f168201915b50505050509150600082511115612fdc57600084815260026020526040902054612f3c906103e89061093a908890612312565b600554909150600090612f57906001600160a01b0316610753565b9050612f668560008484612975565b6005546000868152600760205260409081902054905162fc976160e01b81526001600160a01b039283169262fc976192612fa892889288921690600401613bd2565b600060405180830381600087803b158015612fc257600080fd5b505af1158015612fd6573d6000803e3d6000fd5b50505050505b935093915050565b6000808381612ff4856001613abe565b6001600160401b031681526020810191909152604001600020546001600160a01b031614159392505050565b6000613075826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130f59092919063ffffffff16565b905080516000148061309657508080602001905181019061309691906138bf565b612aad5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a9565b60606123d1848460008585600080866001600160a01b0316858760405161311c9190613c05565b60006040518083038185875af1925050503d8060008114613159576040519150601f19603f3d011682016040523d82523d6000602084013e61315e565b606091505b509150915061316f8783838761317a565b979650505050505050565b606083156131e95782516000036131e2576001600160a01b0385163b6131e25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a9565b50816123d1565b6123d183838151156131fe5781518083602001fd5b8060405162461bcd60e51b81526004016104a99190613448565b508054613224906137d4565b6000825580601f10613234575050565b601f016020900490600052602060002090810190611aa591905b80821115611fdf576000815560010161324e565b60008083601f84011261327457600080fd5b5081356001600160401b0381111561328b57600080fd5b6020830191508360208260051b85010111156132a657600080fd5b9250929050565b60008083601f8401126132bf57600080fd5b5081356001600160401b038111156132d657600080fd5b6020830191508360208285010111156132a657600080fd5b600080600080600080600080600060a08a8c03121561330c57600080fd5b8935985060208a01356001600160401b038082111561332a57600080fd5b6133368d838e01613262565b909a50985060408c013591508082111561334f57600080fd5b61335b8d838e01613262565b909850965060608c013591508082111561337457600080fd5b6133808d838e01613262565b909650945060808c013591508082111561339957600080fd5b506133a68c828d016132ad565b915080935050809150509295985092959850929598565b6000602082840312156133cf57600080fd5b5035919050565b600080604083850312156133e957600080fd5b50508035926020909101359150565b60005b838110156134135781810151838201526020016133fb565b50506000910152565b600081518084526134348160208601602086016133f8565b601f01601f19169290920160200192915050565b602081526000610d55602083018461341c565b6001600160a01b0381168114611aa557600080fd5b80356107d18161345b565b60006020828403121561348d57600080fd5b8135610d558161345b565b6000806000606084860312156134ad57600080fd5b833592506020840135915060408401356134c68161345b565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171561350a5761350a6134d1565b60405290565b600082601f83011261352157600080fd5b813560206001600160401b038083111561353d5761353d6134d1565b8260051b604051601f19603f83011681018181108482111715613562576135626134d1565b60405293845285810183019383810192508785111561358057600080fd5b83870191505b8482101561316f57813583529183019190830190613586565b600080604083850312156135b257600080fd5b8235915060208301356001600160401b038111156135cf57600080fd5b6135db85828601613510565b9150509250929050565b80356001600160601b03811681146107d157600080fd5b60006020828403121561360e57600080fd5b81356001600160401b038082111561362557600080fd5b90830190610160828603121561363a57600080fd5b6136426134e7565b61364b83613470565b815261365960208401613470565b6020820152604083013560408201526060830135606082015261367e608084016135e5565b608082015261368f60a084016135e5565b60a082015260c083013560c082015260e083013560e082015261010080840135818301525061012080840135818301525061014080840135838111156136d457600080fd5b6136e088828701613510565b918301919091525095945050505050565b60008060008060008060008060008060c08b8d03121561371057600080fd5b8a35995060208b01356001600160401b038082111561372e57600080fd5b61373a8e838f01613262565b909b50995060408d013591508082111561375357600080fd5b61375f8e838f01613262565b909950975060608d013591508082111561377857600080fd5b6137848e838f01613262565b909750955085915061379860808e01613470565b945060a08d01359150808211156137ae57600080fd5b506137bb8d828e016132ad565b915080935050809150509295989b9194979a5092959850565b600181811c908216806137e857607f821691505b60208210810361380857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016138365761383661380e565b5060010190565b634e487b7160e01b600052603260045260246000fd5b805180151581146107d157600080fd5b60006040828403121561387557600080fd5b604051604081018181106001600160401b0382111715613897576138976134d1565b60405282516138a58161345b565b81526138b360208401613853565b60208201529392505050565b6000602082840312156138d157600080fd5b610d5582613853565b8381526001600160a01b0383166020808301919091526060604083018190528351908301819052600091848101916080850190845b8181101561392b5784518352938301939183019160010161390f565b509098975050505050505050565b60006020828403121561394b57600080fd5b8151610d558161345b565b601f821115612aad57600081815260208120601f850160051c8101602086101561397d5750805b601f850160051c820191505b8181101561399c57828155600101613989565b505050505050565b81516001600160401b038111156139bd576139bd6134d1565b6139d1816139cb84546137d4565b84613956565b602080601f831160018114613a0657600084156139ee5750858301515b600019600386901b1c1916600185901b17855561399c565b600085815260208120601f198616915b82811015613a3557888601518255948401946001909101908401613a16565b5085821015613a535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160601b03808616835280851660208401525060606040830152613a8f606083018461341c565b95945050505050565b818103818111156105d3576105d361380e565b808201808211156105d3576105d361380e565b6001600160401b03818116838216019080821115613ade57613ade61380e565b5092915050565b6001600160401b03828116828216039080821115613ade57613ade61380e565b80820281158282048414176105d3576105d361380e565b600082613b3957634e487b7160e01b600052601260045260246000fd5b500490565b60208152815160208201526001600160401b0360208301511660408201526001600160601b03604083015116606082015260006060830151613b8b60808401826001600160601b03169052565b5060808301516101008060a0850152613ba861012085018361341c565b915060a085015160c085015260c085015160e085015260e085015181850152508091505092915050565b606081526000613be5606083018661341c565b6020830194909452506001600160a01b0391909116604090910152919050565b60008251613c178184602087016133f8565b919091019291505056fea2646970667358221220fae5e457298793dc00dedd656a5bcf49e9a2d300a2b8972f4b8884ba74582a4d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3709,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "auctionToStrategy",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3713,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "referralFeeNumerator",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3716,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "feeNumerator",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3722,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "referrals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_string_storage))"
      },
      {
        "astId": 3725,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "referralRewardManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IReferralRewardManager)6083"
      },
      {
        "astId": 3730,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "sellOrders",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Data)6311_storage)"
      },
      {
        "astId": 3735,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "auctionData",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(AuctionData)5918_storage)"
      },
      {
        "astId": 3738,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "registeredUsers",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Data)6114_storage"
      },
      {
        "astId": 3740,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "numUsers",
        "offset": 0,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 3742,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "auctionCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3748,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "feeReceiverUserId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint64"
      },
      {
        "astId": 3751,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "strategyManager",
        "offset": 8,
        "slot": "12",
        "type": "t_contract(IStrategyManager)7176"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1231": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralRewardManager)6083": {
        "encoding": "inplace",
        "label": "contract IReferralRewardManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategyManager)7176": {
        "encoding": "inplace",
        "label": "contract IStrategyManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_string_storage)"
      },
      "t_mapping(t_uint256,t_struct(AuctionData)5918_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEasyAuction.AuctionData)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionData)5918_storage"
      },
      "t_mapping(t_uint256,t_struct(Data)6311_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)6311_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AuctionData)5918_storage": {
        "encoding": "inplace",
        "label": "struct IEasyAuction.AuctionData",
        "members": [
          {
            "astId": 5894,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "auctioningToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1231"
          },
          {
            "astId": 5897,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "biddingToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)1231"
          },
          {
            "astId": 5899,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "orderCancellationEndDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5901,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "auctionEndDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5903,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "initialAuctionOrder",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 5905,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "minimumBiddingAmountPerOrder",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5907,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "interimSumBidAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5909,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "interimOrder",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 5911,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "clearingPriceOrder",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          },
          {
            "astId": 5913,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "volumeClearingPriceOrder",
            "offset": 0,
            "slot": "9",
            "type": "t_uint96"
          },
          {
            "astId": 5915,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "minFundingThresholdNotReached",
            "offset": 12,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 5917,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "minFundingThreshold",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Data)6114_storage": {
        "encoding": "inplace",
        "label": "struct IdToAddressBiMap.Data",
        "members": [
          {
            "astId": 6109,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "idToAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_address)"
          },
          {
            "astId": 6113,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "addressToId",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint64)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Data)6311_storage": {
        "encoding": "inplace",
        "label": "struct IterableOrderedOrderSet.Data",
        "members": [
          {
            "astId": 6306,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "nextMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 6310,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "prevMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}