{
  "address": "0x2F5534ccDb562cf2BAD5e453248163E51D921e99",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BalanceIncrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "code",
          "type": "string"
        }
      ],
      "name": "CodeRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_referralCode",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addToBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToCode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "adminOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionBot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "codeToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "isCodeRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "referralCode",
          "type": "string"
        }
      ],
      "name": "referralCodeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "registerCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auction",
          "type": "address"
        }
      ],
      "name": "setAuctionBot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdad6226453b27c7dadac2db7c9e010314606492850d22500c9057f6c9c668d1c",
  "receipt": {
    "to": null,
    "from": "0x9D5a2ddBb543E62e026b182C8929d099781547c3",
    "contractAddress": "0x2F5534ccDb562cf2BAD5e453248163E51D921e99",
    "transactionIndex": 1,
    "gasUsed": "1243496",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000001000000000000000000000000000000000000020002000000000000000800000000000000000000000000000000400020000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000008000000000000000000000000000000000000000",
    "blockHash": "0xc644ba19fa1ef3c6912e13723dceab70fd20ff8ae296200596744c729c287e3f",
    "transactionHash": "0xdad6226453b27c7dadac2db7c9e010314606492850d22500c9057f6c9c668d1c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 54808563,
        "transactionHash": "0xdad6226453b27c7dadac2db7c9e010314606492850d22500c9057f6c9c668d1c",
        "address": "0x2F5534ccDb562cf2BAD5e453248163E51D921e99",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009d5a2ddbb543e62e026b182c8929d099781547c3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc644ba19fa1ef3c6912e13723dceab70fd20ff8ae296200596744c729c287e3f"
      }
    ],
    "blockNumber": 54808563,
    "cumulativeGasUsed": "1243496",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d8c0caa2449d1cea817ba4d85d3fc074",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BalanceIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"CodeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_referralCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"adminOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionBot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"codeToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"isCodeRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"referralCodeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"registerCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuctionBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ReferralRewardManager This is the contract that handles the referral rewards\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReferralRewardManager.sol\":\"ReferralRewardManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ReferralRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IReferralRewardManager.sol\\\";\\n\\n/**\\n * @title ReferralRewardManager\\n * This is the contract that handles the referral rewards\\n */\\ncontract ReferralRewardManager is\\n    IReferralRewardManager,\\n    ReentrancyGuard,\\n    Ownable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    mapping(string => address) public override codeToAddress;\\n    mapping(address => string) public override addressToCode;\\n\\n    mapping(address => mapping(address => uint256)) public balances;\\n\\n    address public auctionBot;\\n\\n    bool public withdrawOpen = false;\\n\\n    constructor() ReentrancyGuard() Ownable() {}\\n\\n    modifier onlyOwnerOrAuction() {\\n        require(\\n            msg.sender == owner() || msg.sender == auctionBot,\\n            \\\"ReferralRewardManager: unauthorized\\\"\\n        );\\n        _;\\n    }\\n\\n    function isCodeRegistered(\\n        string memory _code\\n    ) public view override returns (bool) {\\n        return codeToAddress[_code] != address(0);\\n    }\\n\\n    function referralCodeOwner(\\n        string memory referralCode\\n    ) public view override returns (address) {\\n        return codeToAddress[referralCode];\\n    }\\n\\n    function registerCode(string memory _code) public override {\\n        require(\\n            bytes(_code).length > 0,\\n            \\\"ReferralRewardManager: code cannot be empty\\\"\\n        );\\n        require(\\n            bytes(_code).length <= 8,\\n            \\\"ReferralRewardManager: code cannot be above 8\\\"\\n        );\\n\\n        require(\\n            codeToAddress[_code] == address(0),\\n            \\\"ReferralRewardManager: code already registered or address already has code\\\"\\n        );\\n\\n        codeToAddress[_code] = msg.sender;\\n        addressToCode[msg.sender] = _code;\\n\\n        emit CodeRegistered(msg.sender, _code);\\n    }\\n\\n    function addToBalance(\\n        string memory _referralCode,\\n        uint256 _amount,\\n        address _token\\n    ) public override onlyOwnerOrAuction {\\n        require(\\n            isCodeRegistered(_referralCode),\\n            \\\"ReferralRewardManager: code not registered\\\"\\n        );\\n\\n        address account = codeToAddress[_referralCode];\\n\\n        balances[account][_token] = balances[account][_token] + (_amount);\\n\\n        emit BalanceIncrease(account, _amount, _token);\\n    }\\n\\n    function withdraw(uint256 _amount, address _token) public nonReentrant {\\n        require(withdrawOpen, \\\"ReferralRewardManager: withdraw not open\\\");\\n        require(_amount > 0, \\\"ReferralRewardManager: amount cannot be 0\\\");\\n        require(\\n            balances[msg.sender][_token] >= _amount,\\n            \\\"ReferralRewardManager: insufficient balance\\\"\\n        );\\n\\n        balances[msg.sender][_token] = balances[msg.sender][_token] - (_amount);\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _amount, _token);\\n    }\\n\\n    function adminOverride(\\n        address _account,\\n        string memory _code\\n    ) public onlyOwner {\\n        delete codeToAddress[addressToCode[_account]];\\n\\n        codeToAddress[_code] = _account;\\n        addressToCode[_account] = _code;\\n\\n        emit CodeRegistered(_account, _code);\\n    }\\n\\n    function setAuctionBot(address _auction) public onlyOwner {\\n        auctionBot = _auction;\\n    }\\n\\n    function openWithdraw() public onlyOwner {\\n        withdrawOpen = true;\\n    }\\n\\n    // receive eth\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x8e3d1347d4c92468d0f2c8689da689a3629dcb4ba73e7f09b714806e614344a8\",\"license\":\"MIT\"},\"contracts/interfaces/IReferralRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IReferralRewardManager {\\n    function codeToAddress(\\n        string calldata _code\\n    ) external view returns (address);\\n\\n    function addressToCode(\\n        address _account\\n    ) external view returns (string memory);\\n\\n    function registerCode(string calldata _code) external;\\n\\n    function addToBalance(\\n        string calldata referralCode,\\n        uint256 _amount,\\n        address _token\\n    ) external;\\n\\n    function isCodeRegistered(\\n        string calldata _code\\n    ) external view returns (bool);\\n\\n    function referralCodeOwner(\\n        string calldata referralCode\\n    ) external view returns (address);\\n\\n    event Withdraw(address indexed account, uint256 amount, address token);\\n    event BalanceIncrease(\\n        address indexed account,\\n        uint256 amount,\\n        address token\\n    );\\n    event CodeRegistered(address indexed account, string code);\\n}\\n\",\"keccak256\":\"0x151b9013062003ecc4b6898df0504309de25c2c59409fb96bf2f89a37ddd6ea4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526005805460ff60a01b1916905534801561001d57600080fd5b50600160005561002c33610031565b610083565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6114a0806100926000396000f3fe6080604052600436106100f55760003560e01c80639932dc051161008a578063d2a1945e11610059578063d2a1945e146102e9578063e177bb9b14610309578063eaf928b914610329578063f2fde38b1461034957600080fd5b80639932dc0514610215578063bb46f03014610256578063c23f001f14610276578063c4f74631146102bc57600080fd5b8063715018a6116100c6578063715018a614610199578063845105e2146101ae5780638da5cb5b146101c3578063951f18ab146101f557600080fd5b8062f714ce14610101578062fc976114610123578063302b260e1461014357806351d9bd001461017957600080fd5b366100fc57005b600080fd5b34801561010d57600080fd5b5061012161011c366004610fe0565b610369565b005b34801561012f57600080fd5b5061012161013e3660046110af565b61057c565b34801561014f57600080fd5b5060055461016490600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561018557600080fd5b50610121610194366004611106565b61071e565b3480156101a557600080fd5b50610121610748565b3480156101ba57600080fd5b5061012161075c565b3480156101cf57600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610170565b34801561020157600080fd5b50610164610210366004611128565b610779565b34801561022157600080fd5b506101dd610230366004611128565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b34801561026257600080fd5b506005546101dd906001600160a01b031681565b34801561028257600080fd5b506102ae61029136600461115d565b600460209081526000928352604080842090915290825290205481565b604051908152602001610170565b3480156102c857600080fd5b506102dc6102d7366004611106565b6107b6565b60405161017091906111ab565b3480156102f557600080fd5b506101216103043660046111de565b610850565b34801561031557600080fd5b50610121610324366004611128565b610936565b34801561033557600080fd5b506101dd610344366004611128565b610b59565b34801561035557600080fd5b50610121610364366004611106565b610b8a565b610371610c03565b600554600160a01b900460ff166103e05760405162461bcd60e51b815260206004820152602860248201527f526566657272616c5265776172644d616e616765723a207769746864726177206044820152673737ba1037b832b760c11b60648201526084015b60405180910390fd5b600082116104425760405162461bcd60e51b815260206004820152602960248201527f526566657272616c5265776172644d616e616765723a20616d6f756e7420636160448201526806e6e6f7420626520360bc1b60648201526084016103d7565b3360009081526004602090815260408083206001600160a01b03851684529091529020548211156104c95760405162461bcd60e51b815260206004820152602b60248201527f526566657272616c5265776172644d616e616765723a20696e7375666669636960448201526a656e742062616c616e636560a81b60648201526084016103d7565b3360009081526004602090815260408083206001600160a01b03851684529091529020546104f8908390611242565b3360008181526004602090815260408083206001600160a01b03871680855292529091209290925561052b919084610c5c565b604080518381526001600160a01b038316602082015233917f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b2910160405180910390a26105786001600055565b5050565b6001546001600160a01b031633148061059f57506005546001600160a01b031633145b6105f75760405162461bcd60e51b815260206004820152602360248201527f526566657272616c5265776172644d616e616765723a20756e617574686f72696044820152621e995960ea1b60648201526084016103d7565b61060083610779565b61065f5760405162461bcd60e51b815260206004820152602a60248201527f526566657272616c5265776172644d616e616765723a20636f6465206e6f74206044820152691c9959da5cdd195c995960b21b60648201526084016103d7565b6000600284604051610671919061125b565b9081526040805160209281900383019020546001600160a01b0390811660008181526004855283812092871681529190935220549091506106b3908490611277565b6001600160a01b0382811660008181526004602090815260408083209488168084529482529182902094909455805187815293840192909252917f735fdbfef140ce0d1d608516edce0c33e95f4b4321fa07bfc26ad9b8c4070c66910160405180910390a250505050565b610726610cb3565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610750610cb3565b61075a6000610d0d565b565b610764610cb3565b6005805460ff60a01b1916600160a01b179055565b6000806001600160a01b0316600283604051610795919061125b565b908152604051908190036020019020546001600160a01b0316141592915050565b600360205260009081526040902080546107cf9061128a565b80601f01602080910402602001604051908101604052809291908181526020018280546107fb9061128a565b80156108485780601f1061081d57610100808354040283529160200191610848565b820191906000526020600020905b81548152906001019060200180831161082b57829003601f168201915b505050505081565b610858610cb3565b6001600160a01b038216600090815260036020526040908190209051600291610880916112c4565b90815260405190819003602001812080546001600160a01b031916905582906002906108ad90849061125b565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b0394851617905591841660009081526003909152206108f08282611388565b50816001600160a01b03167f5966bc808bde1b7383cff5c16aae92c9d399e83bba86aed0cbd293ef7267efd68260405161092a91906111ab565b60405180910390a25050565b600081511161099b5760405162461bcd60e51b815260206004820152602b60248201527f526566657272616c5265776172644d616e616765723a20636f64652063616e6e60448201526a6f7420626520656d70747960a81b60648201526084016103d7565b600881511115610a035760405162461bcd60e51b815260206004820152602d60248201527f526566657272616c5265776172644d616e616765723a20636f64652063616e6e60448201526c0dee840c4ca40c2c4deecca407609b1b60648201526084016103d7565b60006001600160a01b0316600282604051610a1e919061125b565b908152604051908190036020019020546001600160a01b031614610abd5760405162461bcd60e51b815260206004820152604a60248201527f526566657272616c5265776172644d616e616765723a20636f646520616c726560448201527f6164792072656769737465726564206f72206164647265737320616c72656164606482015269792068617320636f646560b01b608482015260a4016103d7565b33600282604051610ace919061125b565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b039490941693909317909255336000908152600390915220610b148282611388565b50336001600160a01b03167f5966bc808bde1b7383cff5c16aae92c9d399e83bba86aed0cbd293ef7267efd682604051610b4e91906111ab565b60405180910390a250565b6000600282604051610b6b919061125b565b908152604051908190036020019020546001600160a01b031692915050565b610b92610cb3565b6001600160a01b038116610bf75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d7565b610c0081610d0d565b50565b600260005403610c555760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103d7565b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cae908490610d5f565b505050565b6001546001600160a01b0316331461075a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d7565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610db4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e349092919063ffffffff16565b9050805160001480610dd5575080806020019051810190610dd59190611448565b610cae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d7565b6060610e438484600085610e4b565b949350505050565b606082471015610eac5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d7565b600080866001600160a01b03168587604051610ec8919061125b565b60006040518083038185875af1925050503d8060008114610f05576040519150601f19603f3d011682016040523d82523d6000602084013e610f0a565b606091505b5091509150610f1b87838387610f26565b979650505050505050565b60608315610f95578251600003610f8e576001600160a01b0385163b610f8e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d7565b5081610e43565b610e438383815115610faa5781518083602001fd5b8060405162461bcd60e51b81526004016103d791906111ab565b80356001600160a01b0381168114610fdb57600080fd5b919050565b60008060408385031215610ff357600080fd5b8235915061100360208401610fc4565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261103357600080fd5b813567ffffffffffffffff8082111561104e5761104e61100c565b604051601f8301601f19908116603f011681019082821181831017156110765761107661100c565b8160405283815286602085880101111561108f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156110c457600080fd5b833567ffffffffffffffff8111156110db57600080fd5b6110e786828701611022565b935050602084013591506110fd60408501610fc4565b90509250925092565b60006020828403121561111857600080fd5b61112182610fc4565b9392505050565b60006020828403121561113a57600080fd5b813567ffffffffffffffff81111561115157600080fd5b610e4384828501611022565b6000806040838503121561117057600080fd5b61117983610fc4565b915061100360208401610fc4565b60005b838110156111a257818101518382015260200161118a565b50506000910152565b60208152600082518060208401526111ca816040850160208701611187565b601f01601f19169190910160400192915050565b600080604083850312156111f157600080fd5b6111fa83610fc4565b9150602083013567ffffffffffffffff81111561121657600080fd5b61122285828601611022565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156112555761125561122c565b92915050565b6000825161126d818460208701611187565b9190910192915050565b808201808211156112555761125561122c565b600181811c9082168061129e57607f821691505b6020821081036112be57634e487b7160e01b600052602260045260246000fd5b50919050565b60008083546112d28161128a565b600182811680156112ea57600181146112ff5761132e565b60ff198416875282151583028701945061132e565b8760005260208060002060005b858110156113255781548a82015290840190820161130c565b50505082870194505b50929695505050505050565b601f821115610cae57600081815260208120601f850160051c810160208610156113615750805b601f850160051c820191505b818110156113805782815560010161136d565b505050505050565b815167ffffffffffffffff8111156113a2576113a261100c565b6113b6816113b0845461128a565b8461133a565b602080601f8311600181146113eb57600084156113d35750858301515b600019600386901b1c1916600185901b178555611380565b600085815260208120601f198616915b8281101561141a578886015182559484019460019091019084016113fb565b50858210156114385787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561145a57600080fd5b8151801515811461112157600080fdfea264697066735822122080d6c14a4d942794e22c97620326a59b947c571482e9340f9fe1c9efdffd7f2f64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100f55760003560e01c80639932dc051161008a578063d2a1945e11610059578063d2a1945e146102e9578063e177bb9b14610309578063eaf928b914610329578063f2fde38b1461034957600080fd5b80639932dc0514610215578063bb46f03014610256578063c23f001f14610276578063c4f74631146102bc57600080fd5b8063715018a6116100c6578063715018a614610199578063845105e2146101ae5780638da5cb5b146101c3578063951f18ab146101f557600080fd5b8062f714ce14610101578062fc976114610123578063302b260e1461014357806351d9bd001461017957600080fd5b366100fc57005b600080fd5b34801561010d57600080fd5b5061012161011c366004610fe0565b610369565b005b34801561012f57600080fd5b5061012161013e3660046110af565b61057c565b34801561014f57600080fd5b5060055461016490600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561018557600080fd5b50610121610194366004611106565b61071e565b3480156101a557600080fd5b50610121610748565b3480156101ba57600080fd5b5061012161075c565b3480156101cf57600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610170565b34801561020157600080fd5b50610164610210366004611128565b610779565b34801561022157600080fd5b506101dd610230366004611128565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b34801561026257600080fd5b506005546101dd906001600160a01b031681565b34801561028257600080fd5b506102ae61029136600461115d565b600460209081526000928352604080842090915290825290205481565b604051908152602001610170565b3480156102c857600080fd5b506102dc6102d7366004611106565b6107b6565b60405161017091906111ab565b3480156102f557600080fd5b506101216103043660046111de565b610850565b34801561031557600080fd5b50610121610324366004611128565b610936565b34801561033557600080fd5b506101dd610344366004611128565b610b59565b34801561035557600080fd5b50610121610364366004611106565b610b8a565b610371610c03565b600554600160a01b900460ff166103e05760405162461bcd60e51b815260206004820152602860248201527f526566657272616c5265776172644d616e616765723a207769746864726177206044820152673737ba1037b832b760c11b60648201526084015b60405180910390fd5b600082116104425760405162461bcd60e51b815260206004820152602960248201527f526566657272616c5265776172644d616e616765723a20616d6f756e7420636160448201526806e6e6f7420626520360bc1b60648201526084016103d7565b3360009081526004602090815260408083206001600160a01b03851684529091529020548211156104c95760405162461bcd60e51b815260206004820152602b60248201527f526566657272616c5265776172644d616e616765723a20696e7375666669636960448201526a656e742062616c616e636560a81b60648201526084016103d7565b3360009081526004602090815260408083206001600160a01b03851684529091529020546104f8908390611242565b3360008181526004602090815260408083206001600160a01b03871680855292529091209290925561052b919084610c5c565b604080518381526001600160a01b038316602082015233917f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b2910160405180910390a26105786001600055565b5050565b6001546001600160a01b031633148061059f57506005546001600160a01b031633145b6105f75760405162461bcd60e51b815260206004820152602360248201527f526566657272616c5265776172644d616e616765723a20756e617574686f72696044820152621e995960ea1b60648201526084016103d7565b61060083610779565b61065f5760405162461bcd60e51b815260206004820152602a60248201527f526566657272616c5265776172644d616e616765723a20636f6465206e6f74206044820152691c9959da5cdd195c995960b21b60648201526084016103d7565b6000600284604051610671919061125b565b9081526040805160209281900383019020546001600160a01b0390811660008181526004855283812092871681529190935220549091506106b3908490611277565b6001600160a01b0382811660008181526004602090815260408083209488168084529482529182902094909455805187815293840192909252917f735fdbfef140ce0d1d608516edce0c33e95f4b4321fa07bfc26ad9b8c4070c66910160405180910390a250505050565b610726610cb3565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610750610cb3565b61075a6000610d0d565b565b610764610cb3565b6005805460ff60a01b1916600160a01b179055565b6000806001600160a01b0316600283604051610795919061125b565b908152604051908190036020019020546001600160a01b0316141592915050565b600360205260009081526040902080546107cf9061128a565b80601f01602080910402602001604051908101604052809291908181526020018280546107fb9061128a565b80156108485780601f1061081d57610100808354040283529160200191610848565b820191906000526020600020905b81548152906001019060200180831161082b57829003601f168201915b505050505081565b610858610cb3565b6001600160a01b038216600090815260036020526040908190209051600291610880916112c4565b90815260405190819003602001812080546001600160a01b031916905582906002906108ad90849061125b565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b0394851617905591841660009081526003909152206108f08282611388565b50816001600160a01b03167f5966bc808bde1b7383cff5c16aae92c9d399e83bba86aed0cbd293ef7267efd68260405161092a91906111ab565b60405180910390a25050565b600081511161099b5760405162461bcd60e51b815260206004820152602b60248201527f526566657272616c5265776172644d616e616765723a20636f64652063616e6e60448201526a6f7420626520656d70747960a81b60648201526084016103d7565b600881511115610a035760405162461bcd60e51b815260206004820152602d60248201527f526566657272616c5265776172644d616e616765723a20636f64652063616e6e60448201526c0dee840c4ca40c2c4deecca407609b1b60648201526084016103d7565b60006001600160a01b0316600282604051610a1e919061125b565b908152604051908190036020019020546001600160a01b031614610abd5760405162461bcd60e51b815260206004820152604a60248201527f526566657272616c5265776172644d616e616765723a20636f646520616c726560448201527f6164792072656769737465726564206f72206164647265737320616c72656164606482015269792068617320636f646560b01b608482015260a4016103d7565b33600282604051610ace919061125b565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b039490941693909317909255336000908152600390915220610b148282611388565b50336001600160a01b03167f5966bc808bde1b7383cff5c16aae92c9d399e83bba86aed0cbd293ef7267efd682604051610b4e91906111ab565b60405180910390a250565b6000600282604051610b6b919061125b565b908152604051908190036020019020546001600160a01b031692915050565b610b92610cb3565b6001600160a01b038116610bf75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d7565b610c0081610d0d565b50565b600260005403610c555760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103d7565b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cae908490610d5f565b505050565b6001546001600160a01b0316331461075a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d7565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610db4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e349092919063ffffffff16565b9050805160001480610dd5575080806020019051810190610dd59190611448565b610cae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d7565b6060610e438484600085610e4b565b949350505050565b606082471015610eac5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d7565b600080866001600160a01b03168587604051610ec8919061125b565b60006040518083038185875af1925050503d8060008114610f05576040519150601f19603f3d011682016040523d82523d6000602084013e610f0a565b606091505b5091509150610f1b87838387610f26565b979650505050505050565b60608315610f95578251600003610f8e576001600160a01b0385163b610f8e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d7565b5081610e43565b610e438383815115610faa5781518083602001fd5b8060405162461bcd60e51b81526004016103d791906111ab565b80356001600160a01b0381168114610fdb57600080fd5b919050565b60008060408385031215610ff357600080fd5b8235915061100360208401610fc4565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261103357600080fd5b813567ffffffffffffffff8082111561104e5761104e61100c565b604051601f8301601f19908116603f011681019082821181831017156110765761107661100c565b8160405283815286602085880101111561108f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156110c457600080fd5b833567ffffffffffffffff8111156110db57600080fd5b6110e786828701611022565b935050602084013591506110fd60408501610fc4565b90509250925092565b60006020828403121561111857600080fd5b61112182610fc4565b9392505050565b60006020828403121561113a57600080fd5b813567ffffffffffffffff81111561115157600080fd5b610e4384828501611022565b6000806040838503121561117057600080fd5b61117983610fc4565b915061100360208401610fc4565b60005b838110156111a257818101518382015260200161118a565b50506000910152565b60208152600082518060208401526111ca816040850160208701611187565b601f01601f19169190910160400192915050565b600080604083850312156111f157600080fd5b6111fa83610fc4565b9150602083013567ffffffffffffffff81111561121657600080fd5b61122285828601611022565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156112555761125561122c565b92915050565b6000825161126d818460208701611187565b9190910192915050565b808201808211156112555761125561122c565b600181811c9082168061129e57607f821691505b6020821081036112be57634e487b7160e01b600052602260045260246000fd5b50919050565b60008083546112d28161128a565b600182811680156112ea57600181146112ff5761132e565b60ff198416875282151583028701945061132e565b8760005260208060002060005b858110156113255781548a82015290840190820161130c565b50505082870194505b50929695505050505050565b601f821115610cae57600081815260208120601f850160051c810160208610156113615750805b601f850160051c820191505b818110156113805782815560010161136d565b505050505050565b815167ffffffffffffffff8111156113a2576113a261100c565b6113b6816113b0845461128a565b8461133a565b602080601f8311600181146113eb57600084156113d35750858301515b600019600386901b1c1916600185901b178555611380565b600085815260208120601f198616915b8281101561141a578886015182559484019460019091019084016113fb565b50858210156114385787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561145a57600080fd5b8151801515811461112157600080fdfea264697066735822122080d6c14a4d942794e22c97620326a59b947c571482e9340f9fe1c9efdffd7f2f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ReferralRewardManager This is the contract that handles the referral rewards",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1796,
        "contract": "contracts/ReferralRewardManager.sol:ReferralRewardManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1680,
        "contract": "contracts/ReferralRewardManager.sol:ReferralRewardManager",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7211,
        "contract": "contracts/ReferralRewardManager.sol:ReferralRewardManager",
        "label": "codeToAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 7216,
        "contract": "contracts/ReferralRewardManager.sol:ReferralRewardManager",
        "label": "addressToCode",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 7222,
        "contract": "contracts/ReferralRewardManager.sol:ReferralRewardManager",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7224,
        "contract": "contracts/ReferralRewardManager.sol:ReferralRewardManager",
        "label": "auctionBot",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7227,
        "contract": "contracts/ReferralRewardManager.sol:ReferralRewardManager",
        "label": "withdrawOpen",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}