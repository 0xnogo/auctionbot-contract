{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/AuctionBot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"./interfaces/IAuctionBot.sol\";\nimport \"./interfaces/IReferralRewardManager.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./libraries/IterableOrderedOrderSet.sol\";\nimport \"./libraries/IdToAddressBiMap.sol\";\nimport \"./libraries/SafeCast.sol\";\nimport \"./strategies/interfaces/IStrategyManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract AuctionBot is\n    IAuctionBot,\n    Initializable,\n    OwnableUpgradeable,\n    UUPSUpgradeable\n{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint64;\n    using SafeMath for uint96;\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\n    using IterableOrderedOrderSet for bytes32;\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\n\n    modifier atStageOrderPlacement(uint256 auctionId) {\n        require(\n            (block.timestamp < auctionData[auctionId].auctionEndDate),\n            \"E1\"\n        );\n        _;\n    }\n\n    modifier atStageOrderPlacementAndCancelation(uint256 auctionId) {\n        require(\n            (block.timestamp < auctionData[auctionId].orderCancellationEndDate),\n            \"E2\"\n        );\n        _;\n    }\n\n    modifier atStageSolutionSubmission(uint256 auctionId) {\n        {\n            uint256 auctionEndDate = auctionData[auctionId].auctionEndDate;\n            require(\n                (auctionEndDate != 0 &&\n                    block.timestamp >= auctionEndDate &&\n                    auctionData[auctionId].clearingPriceOrder == bytes32(0)),\n                \"E3\"\n            );\n        }\n        _;\n    }\n\n    modifier atStageFinished(uint256 auctionId) {\n        require(\n            (auctionData[auctionId].clearingPriceOrder != bytes32(0)),\n            \"E4\"\n        );\n        _;\n    }\n\n    mapping(uint256 => uint256) public auctionToStrategy;\n    mapping(uint256 => uint256) public referralFeeNumerator;\n    mapping(uint256 => mapping(bytes32 => string)) public referrals;\n    mapping(uint256 => IterableOrderedOrderSet.Data) internal sellOrders;\n    mapping(uint256 => AuctionData) public auctionData;\n    mapping(address => bool) public biddingTokenWhitelist;\n\n    IdToAddressBiMap.Data private registeredUsers;\n    uint64 public numUsers;\n    uint256 public auctionCounter;\n\n    uint256 public feeNumerator;\n    uint256 public constant FEE_DENOMINATOR = 1000;\n    uint64 public feeReceiverUserId;\n\n    IReferralRewardManager public referralRewardManager;\n    IStrategyManager public strategyManager;\n    IUniswapV2Router02 public uniswapV2Router;\n\n    error EthSendingFailed();\n\n    function initialize(\n        IReferralRewardManager _referralRewardManager,\n        IStrategyManager _strategyManager,\n        address _feeReceiverAddress,\n        IUniswapV2Router02 _uniswapV2Router,\n        address[] memory _biddingTokenWhitelist,\n        uint256 _feeNumerator\n    ) external initializer {\n        require((address(_referralRewardManager) != address(0)), \"E5\");\n\n        __Ownable_init();\n        referralRewardManager = _referralRewardManager;\n        strategyManager = _strategyManager;\n        setFeeParameters(_feeNumerator, _feeReceiverAddress);\n\n        uniswapV2Router = _uniswapV2Router;\n\n        for (uint256 i = 0; i < _biddingTokenWhitelist.length; i++) {\n            biddingTokenWhitelist[_biddingTokenWhitelist[i]] = true;\n        }\n    }\n\n    receive() external payable {}\n\n    ///@dev required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    function setFeeParameters(\n        uint256 newFeeNumerator,\n        address newfeeReceiverAddress\n    ) public onlyOwner {\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\n        feeReceiverUserId = getUserId(newfeeReceiverAddress);\n        feeNumerator = newFeeNumerator;\n    }\n\n    function addBiddingTokenToWhitelist(address tokenAddress) public onlyOwner {\n        biddingTokenWhitelist[tokenAddress] = true;\n    }\n\n    function removeBiddingTokenFromWhitelist(\n        address tokenAddress\n    ) public onlyOwner {\n        biddingTokenWhitelist[tokenAddress] = false;\n    }\n\n    function initiateAuction(\n        InitParams memory params\n    ) public returns (uint256) {\n        // withdraws sellAmount\n        if (params._strategyId != 0) {\n            params._auctioningToken.safeTransferFrom(\n                msg.sender,\n                address(this),\n                params._auctionedSellAmount\n            );\n        }\n        auctionCounter = auctionCounter.add(1);\n        if (params._strategyId > 1) {\n            StrategyData memory strategy = strategyManager.getStrategy(\n                params._strategyId\n            );\n            require(strategy.enabled, \"E7\");\n            strategy.strategyContract.init(\n                auctionCounter,\n                address(params._auctioningToken),\n                params._strategyInitParams\n            );\n        }\n\n        require((params._referralFeeNumerator <= 100), \"E8\");\n        require((params._auctionedSellAmount > 0), \"E9\");\n        require((params._minBuyAmount > 0), \"E10\");\n        require((params._minimumBiddingAmountPerOrder > 0), \"E11\");\n        require(\n            (params._orderCancellationEndDate <= params._auctionEndDate),\n            \"E12\"\n        );\n        require((params._auctionEndDate > block.timestamp), \"E13\");\n        require(\n            ((params._strategyId == 0 && msg.sender == owner()) ||\n                params._strategyId > 0),\n            \"E14\"\n        );\n        require((biddingTokenWhitelist[address(params._biddingToken)]), \"E26\");\n\n        sellOrders[auctionCounter].initializeEmptyList();\n        uint64 userId = getUserId(msg.sender);\n        auctionData[auctionCounter] = AuctionData(\n            params._auctioningToken,\n            params._biddingToken,\n            params._orderCancellationEndDate,\n            params._auctionEndDate,\n            IterableOrderedOrderSet.encodeOrder(\n                userId,\n                params._minBuyAmount,\n                params._auctionedSellAmount\n            ),\n            params._minimumBiddingAmountPerOrder,\n            0,\n            IterableOrderedOrderSet.QUEUE_START,\n            bytes32(0),\n            0,\n            false,\n            params._minFundingThreshold\n        );\n        auctionToStrategy[auctionCounter] = params._strategyId;\n        referralFeeNumerator[auctionCounter] = params._referralFeeNumerator;\n        emit NewAuction(\n            auctionCounter,\n            params._auctioningToken,\n            params._biddingToken,\n            params._orderCancellationEndDate,\n            params._auctionEndDate,\n            userId,\n            params._auctionedSellAmount,\n            params._minBuyAmount,\n            params._minimumBiddingAmountPerOrder,\n            params._minFundingThreshold\n        );\n        return auctionCounter;\n    }\n\n    function placeSellOrders(\n        uint256 auctionId,\n        uint96[] calldata _minBuyAmounts,\n        uint96[] calldata _sellAmounts,\n        bytes32[] calldata _prevSellOrders,\n        string calldata referralCode\n    )\n        external\n        atStageOrderPlacement(auctionId)\n        returns (uint64 userId, uint256 sumOfSellAmounts)\n    {\n        return\n            _placeSellOrders(\n                auctionId,\n                _minBuyAmounts,\n                _sellAmounts,\n                _prevSellOrders,\n                msg.sender,\n                referralCode\n            );\n    }\n\n    function placeSellOrdersOnBehalf(\n        uint256 auctionId,\n        uint96[] calldata _minBuyAmounts,\n        uint96[] calldata _sellAmounts,\n        bytes32[] calldata _prevSellOrders,\n        address orderSubmitter,\n        string calldata referralCode\n    )\n        external\n        atStageOrderPlacement(auctionId)\n        returns (uint64 userId, uint256 sumOfSellAmounts)\n    {\n        return\n            _placeSellOrders(\n                auctionId,\n                _minBuyAmounts,\n                _sellAmounts,\n                _prevSellOrders,\n                orderSubmitter,\n                referralCode\n            );\n    }\n\n    function _placeSellOrders(\n        uint256 auctionId,\n        uint96[] memory _minBuyAmounts,\n        uint96[] memory _sellAmounts,\n        bytes32[] memory _prevSellOrders,\n        address orderSubmitter,\n        string memory referralCode\n    ) internal returns (uint64 userId, uint256 sumOfSellAmounts) {\n        {\n            (\n                ,\n                uint96 buyAmountOfInitialAuctionOrder,\n                uint96 sellAmountOfInitialAuctionOrder\n            ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\n            for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\n                require(\n                    _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\n                        sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\n                    \"E16\"\n                );\n            }\n        }\n        userId = getUserId(orderSubmitter);\n        uint256 minimumBiddingAmountPerOrder = auctionData[auctionId]\n            .minimumBiddingAmountPerOrder;\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\n            require((_minBuyAmounts[i] > 0), \"E15\");\n            // orders should have a minimum bid size in order to limit the gas\n            // required to compute the final price of the auction.\n            require((_sellAmounts[i] > minimumBiddingAmountPerOrder), \"E17\");\n            bytes32 encodedOrder = IterableOrderedOrderSet.encodeOrder(\n                userId,\n                _minBuyAmounts[i],\n                _sellAmounts[i]\n            );\n            if (\n                sellOrders[auctionId].insert(encodedOrder, _prevSellOrders[i])\n            ) {\n                if (bytes(referralCode).length != 0) {\n                    require(\n                        (referralRewardManager.isCodeRegistered(referralCode)),\n                        \"E18\"\n                    );\n                    require(\n                        (referralRewardManager.referralCodeOwner(\n                            referralCode\n                        ) != orderSubmitter),\n                        \"E19\"\n                    );\n                    referrals[auctionId][encodedOrder] = referralCode;\n                }\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\n                emit NewSellOrder(\n                    auctionId,\n                    userId,\n                    _minBuyAmounts[i],\n                    _sellAmounts[i],\n                    referralCode\n                );\n            }\n        }\n        auctionData[auctionId].biddingToken.safeTransferFrom(\n            msg.sender,\n            address(this),\n            sumOfSellAmounts\n        ); //[1]\n    }\n\n    function cancelSellOrders(\n        uint256 auctionId,\n        bytes32[] memory _sellOrders\n    ) public atStageOrderPlacementAndCancelation(auctionId) {\n        uint64 userId = getUserId(msg.sender);\n        uint256 claimableAmount = 0;\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\n            // Note: we keep the back pointer of the deleted element so that\n            // it can be used as a reference point to insert a new node.\n            delete referrals[auctionId][_sellOrders[i]];\n            bool success = sellOrders[auctionId].removeKeepHistory(\n                _sellOrders[i]\n            );\n            if (success) {\n                (\n                    uint64 userIdOfIter,\n                    uint96 buyAmountOfIter,\n                    uint96 sellAmountOfIter\n                ) = _sellOrders[i].decodeOrder();\n                require((userIdOfIter == userId), \"E22\");\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\n                emit CancellationSellOrder(\n                    auctionId,\n                    userId,\n                    buyAmountOfIter,\n                    sellAmountOfIter\n                );\n            }\n        }\n\n        auctionData[auctionId].biddingToken.safeTransfer(\n            msg.sender,\n            claimableAmount\n        ); //[2]\n    }\n\n    function precalculateSellAmountSum(\n        uint256 auctionId,\n        uint256 iterationSteps\n    ) public atStageSolutionSubmission(auctionId) {\n        (, , uint96 auctioneerSellAmount) = auctionData[auctionId]\n            .initialAuctionOrder\n            .decodeOrder();\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\n        for (uint256 i = 0; i < iterationSteps; i++) {\n            iterOrder = sellOrders[auctionId].next(iterOrder);\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\n        }\n        require((iterOrder != IterableOrderedOrderSet.QUEUE_END), \"E20\");\n        // it is checked that not too many iteration steps were taken:\n        // require that the sum of SellAmounts times the price of the last order\n        // is not more than initially sold amount\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) = iterOrder\n            .decodeOrder();\n        require(\n            sumBidAmount.mul(buyAmountOfIter) <\n                auctioneerSellAmount.mul(sellAmountOfIter),\n            \"E21\"\n        );\n        auctionData[auctionId].interimSumBidAmount = sumBidAmount;\n        auctionData[auctionId].interimOrder = iterOrder;\n    }\n\n    // @dev function settling the auction and calculating the price\n    function settleAuction(\n        uint256 auctionId\n    )\n        public\n        atStageSolutionSubmission(auctionId)\n        returns (bytes32 clearingOrder)\n    {\n        (\n            uint64 auctioneerId,\n            uint96 minAuctionedBuyAmount,\n            uint96 fullAuctionedAmount\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\n        uint256 currentBidSum = auctionData[auctionId].interimSumBidAmount;\n        bytes32 currentOrder = auctionData[auctionId].interimOrder;\n        uint256 buyAmountOfIter;\n        uint256 sellAmountOfIter;\n        uint96 fillVolumeOfAuctioneerOrder = fullAuctionedAmount;\n        // Sum order up, until fullAuctionedAmount is fully bought or queue end is reached\n        do {\n            bytes32 nextOrder = sellOrders[auctionId].next(currentOrder);\n            if (nextOrder == IterableOrderedOrderSet.QUEUE_END) {\n                break;\n            }\n            currentOrder = nextOrder;\n            (, buyAmountOfIter, sellAmountOfIter) = currentOrder.decodeOrder();\n            currentBidSum = currentBidSum.add(sellAmountOfIter);\n        } while (\n            currentBidSum.mul(buyAmountOfIter) <\n                fullAuctionedAmount.mul(sellAmountOfIter)\n        );\n        if (\n            currentBidSum > 0 &&\n            currentBidSum.mul(buyAmountOfIter) >=\n            fullAuctionedAmount.mul(sellAmountOfIter)\n        ) {\n            // All considered/summed orders are sufficient to close the auction fully\n            // at price between current and previous orders.\n            uint256 uncoveredBids = currentBidSum.sub(\n                fullAuctionedAmount.mul(sellAmountOfIter).div(buyAmountOfIter)\n            );\n            if (sellAmountOfIter >= uncoveredBids) {\n                //[13]\n                // Auction fully filled via partial match of currentOrder\n                uint256 sellAmountClearingOrder = sellAmountOfIter.sub(\n                    uncoveredBids\n                );\n                auctionData[auctionId]\n                    .volumeClearingPriceOrder = sellAmountClearingOrder\n                    .toUint96();\n                currentBidSum = currentBidSum.sub(uncoveredBids);\n                clearingOrder = currentOrder;\n            } else {\n                //[14]\n                // Auction fully filled via price strictly between currentOrder and the order\n                // immediately before. For a proof, see the security-considerations.md\n                currentBidSum = currentBidSum.sub(sellAmountOfIter);\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\n                    0,\n                    fullAuctionedAmount,\n                    currentBidSum.toUint96()\n                );\n            }\n        } else {\n            // All considered/summed orders are not sufficient to close the auction fully at price of last order //[18]\n            // Either a higher price must be used or auction is only partially filled\n            if (currentBidSum > minAuctionedBuyAmount) {\n                //[15]\n                // Price higher than last order would fill the auction\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\n                    0,\n                    fullAuctionedAmount,\n                    currentBidSum.toUint96()\n                );\n            } else {\n                //[16]\n                // Even at the initial auction price, the auction is partially filled\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\n                    0,\n                    fullAuctionedAmount,\n                    minAuctionedBuyAmount\n                );\n                fillVolumeOfAuctioneerOrder = currentBidSum\n                    .mul(fullAuctionedAmount)\n                    .div(minAuctionedBuyAmount)\n                    .toUint96();\n            }\n        }\n        auctionData[auctionId].clearingPriceOrder = clearingOrder;\n        if (auctionData[auctionId].minFundingThreshold > currentBidSum) {\n            auctionData[auctionId].minFundingThresholdNotReached = true;\n        }\n        processFeesAndAuctioneerFunds(\n            auctionId,\n            fillVolumeOfAuctioneerOrder,\n            auctioneerId,\n            fullAuctionedAmount\n        );\n        {\n            (\n                uint64 userId,\n                uint96 buyAmount,\n                uint96 sellAmount\n            ) = IterableOrderedOrderSet.decodeOrder(clearingOrder);\n            emit AuctionCleared(\n                auctionId,\n                userId,\n                buyAmount,\n                sellAmount,\n                fillVolumeOfAuctioneerOrder,\n                uint96(currentBidSum)\n            );\n        }\n\n        // Gas refunds\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\n        auctionData[auctionId].interimOrder = bytes32(0);\n        auctionData[auctionId].interimSumBidAmount = uint256(0);\n        auctionData[auctionId].minimumBiddingAmountPerOrder = uint256(0);\n    }\n\n    function claimFromParticipantOrders(\n        uint256 auctionId,\n        bytes32[] memory orders\n    )\n        external\n        atStageFinished(auctionId)\n        returns (\n            uint256 sumAuctioningTokenAmount,\n            uint256 sumBiddingTokenAmount\n        )\n    {\n        (uint64 userId, , ) = orders[0].decodeOrder();\n        for (uint256 index = 0; index < orders.length; index++) {\n            (uint64 userIdOrder, , ) = orders[index].decodeOrder();\n            require((userIdOrder == userId), \"E23\");\n            (\n                uint256 auctioningTokenAmount,\n                uint256 biddingTokenAmount\n            ) = _claimFromParticipantOrder(auctionId, orders[index]);\n            sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\n                auctioningTokenAmount\n            );\n            sumBiddingTokenAmount = sumBiddingTokenAmount.add(\n                biddingTokenAmount\n            );\n        }\n        uint256 strategyId = auctionToStrategy[auctionId];\n        if (sumAuctioningTokenAmount > 0 && strategyId > 1) {\n            address userAddress = registeredUsers.getAddressAt(userId);\n            IStrategy strategy = strategyManager\n                .getStrategy(strategyId)\n                .strategyContract;\n            IERC20(auctionData[auctionId].auctioningToken).transfer(\n                address(strategy),\n                sumAuctioningTokenAmount\n            );\n            strategy.execute(\n                sumAuctioningTokenAmount,\n                address(auctionData[auctionId].auctioningToken),\n                auctionId,\n                userAddress\n            );\n            sumAuctioningTokenAmount = 0;\n        }\n        sendOutTokens(\n            auctionId,\n            sumAuctioningTokenAmount,\n            sumBiddingTokenAmount,\n            userId\n        );\n    }\n\n    function _claimFromParticipantOrder(\n        uint256 auctionId,\n        bytes32 order\n    )\n        internal\n        returns (\n            uint256 sumAuctioningTokenAmount,\n            uint256 sumBiddingTokenAmount\n        )\n    {\n        require((sellOrders[auctionId].remove(order)), \"E24\");\n        AuctionData memory auction = auctionData[auctionId];\n        (, uint96 priceNumerator, uint96 priceDenominator) = auction\n            .clearingPriceOrder\n            .decodeOrder();\n        bool minFundingThresholdNotReached = auction\n            .minFundingThresholdNotReached;\n        (uint64 userId, uint96 buyAmount, uint96 sellAmount) = order\n            .decodeOrder();\n        string memory referralCode;\n        uint256 referralFee;\n        if (minFundingThresholdNotReached) {\n            //[10]\n            sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);\n        } else {\n            //[23]\n            if (order == auction.clearingPriceOrder) {\n                //[25]\n                sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\n                    auction.volumeClearingPriceOrder.mul(priceNumerator).div(\n                        priceDenominator\n                    )\n                );\n                sumBiddingTokenAmount = sumBiddingTokenAmount.add(\n                    sellAmount.sub(auction.volumeClearingPriceOrder)\n                );\n            } else {\n                if (order.smallerThan(auction.clearingPriceOrder)) {\n                    //[17]\n                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\n                        sellAmount.mul(priceNumerator).div(priceDenominator)\n                    );\n                } else {\n                    //[24]\n                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(\n                        sellAmount\n                    );\n                }\n            }\n        }\n        {\n            if (sumAuctioningTokenAmount > 0) {\n                (referralCode, referralFee) = registerReferralEarnings(\n                    sellAmount,\n                    auctionId,\n                    order\n                );\n            }\n            sumBiddingTokenAmount = sumBiddingTokenAmount.sub(referralFee);\n            emit ClaimedFromOrder(\n                IClaimedFromOrder(\n                    auctionId,\n                    userId,\n                    buyAmount,\n                    sellAmount,\n                    referralCode,\n                    referralFee,\n                    sumAuctioningTokenAmount,\n                    sumBiddingTokenAmount\n                )\n            );\n        }\n    }\n\n    function processFeesAndAuctioneerFunds(\n        uint256 auctionId,\n        uint256 fillVolumeOfAuctioneerOrder,\n        uint64 auctioneerId,\n        uint96 fullAuctionedAmount\n    ) internal {\n        if (auctionData[auctionId].minFundingThresholdNotReached) {\n            sendOutTokens(auctionId, fullAuctionedAmount, 0, auctioneerId); //[4]\n        } else {\n            //[11]\n            (, uint96 priceNumerator, uint96 priceDenominator) = auctionData[\n                auctionId\n            ].clearingPriceOrder.decodeOrder();\n            uint256 unsettledAuctionTokens = fullAuctionedAmount.sub(\n                fillVolumeOfAuctioneerOrder\n            );\n            uint256 biddingTokenAmount = fillVolumeOfAuctioneerOrder\n                .mul(priceDenominator)\n                .div(priceNumerator);\n\n            // calculate fees to swap/send to the token address\n            uint256 feeAmount = biddingTokenAmount.mul(feeNumerator).div(\n                FEE_DENOMINATOR\n            );\n\n            uint256 biddingTokenAmountAfterFee = biddingTokenAmount.sub(\n                feeAmount\n            );\n\n            sendOutTokens(\n                auctionId,\n                unsettledAuctionTokens,\n                biddingTokenAmountAfterFee,\n                auctioneerId\n            ); //[5]\n\n            // swap allowed tokens to ETH\n            uint256 ethAmount = feeAmount;\n            address biddingAddress = address(\n                auctionData[auctionId].biddingToken\n            );\n            if (biddingAddress != uniswapV2Router.WETH()) {\n                console.log(feeAmount);\n                uint256 initialEthBalance = address(this).balance;\n                swapTokensForEth(biddingAddress, feeAmount);\n                ethAmount = address(this).balance.sub(initialEthBalance);\n                console.log(ethAmount);\n            } else {\n                // unwrap WETH to ETH\n                IWETH(uniswapV2Router.WETH()).withdraw(ethAmount);\n            }\n\n            if (ethAmount > 0) {\n                //send eth to the fee receiver\n                (bool success, ) = registeredUsers\n                    .getAddressAt(feeReceiverUserId)\n                    .call{value: ethAmount}(\"\");\n                if (!success) revert EthSendingFailed();\n\n                emit Distribution(auctionId, ethAmount);\n            }\n        }\n    }\n\n    function swapTokensForEth(address token, uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = uniswapV2Router.WETH();\n\n        IERC20(token).approve(address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function registerReferralEarnings(\n        uint256 sellAmount,\n        uint256 auctionId,\n        bytes32 order\n    ) internal returns (string memory referralCode, uint256 referralFee) {\n        referralCode = referrals[auctionId][order];\n        if (bytes(referralCode).length > 0) {\n            referralFee = sellAmount.mul(referralFeeNumerator[auctionId]).div(\n                FEE_DENOMINATOR\n            );\n            uint64 userId = getUserId(address(referralRewardManager));\n            sendOutTokens(auctionId, 0, referralFee, userId);\n            referralRewardManager.addToBalance(\n                referralCode,\n                referralFee,\n                address(auctionData[auctionId].auctioningToken)\n            );\n        }\n    }\n\n    function sendOutTokens(\n        uint256 auctionId,\n        uint256 auctioningTokenAmount,\n        uint256 biddingTokenAmount,\n        uint64 userId\n    ) internal {\n        address userAddress = registeredUsers.getAddressAt(userId);\n        if (auctioningTokenAmount > 0 && auctionToStrategy[auctionId] != 0) {\n            auctionData[auctionId].auctioningToken.safeTransfer(\n                userAddress,\n                auctioningTokenAmount\n            );\n        }\n        if (biddingTokenAmount > 0) {\n            auctionData[auctionId].biddingToken.safeTransfer(\n                userAddress,\n                biddingTokenAmount\n            );\n        }\n    }\n\n    function registerUser(address user) public returns (uint64 userId) {\n        numUsers = numUsers.add(1).toUint64();\n        require((registeredUsers.insert(numUsers, user)), \"E25\");\n        userId = numUsers;\n        emit UserRegistration(user, userId);\n    }\n\n    function getUserId(address user) public returns (uint64 userId) {\n        if (registeredUsers.hasAddress(user)) {\n            userId = registeredUsers.getId(user);\n        } else {\n            userId = registerUser(user);\n            emit NewUser(userId, user);\n        }\n    }\n\n    function getSecondsRemainingInBatch(\n        uint256 auctionId\n    ) public view returns (uint256) {\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\n            return 0;\n        }\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\n    }\n\n    function containsOrder(\n        uint256 auctionId,\n        bytes32 order\n    ) public view returns (bool) {\n        return sellOrders[auctionId].contains(order);\n    }\n}\n"
    },
    "contracts/ERC20Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\";\n\ncontract ERC20Factory {\n    // Event to log the address of the deployed ERC20 contract.\n    event ERC20Deployed(\n        address indexed deployer,\n        address indexed erc20Address,\n        string name,\n        string symbol,\n        uint256 initialAmount\n    );\n\n    /**\n     * @dev Deploy a new ERC20 token with the specified name, symbol, decimals, and initial amount.\n     * @param name Name of the ERC20 token.\n     * @param symbol Symbol of the ERC20 token.\n     * @param initialAmount Initial supply of the token. Will be minted to the caller.\n     * @return newERC20 Address of the newly deployed ERC20 token.\n     */\n    function deployERC20(\n        string memory name,\n        string memory symbol,\n        uint256 initialAmount\n    ) external returns (address newERC20) {\n        CustomERC20 token = new CustomERC20(\n            name,\n            symbol,\n            initialAmount,\n            msg.sender\n        );\n        emit ERC20Deployed(\n            msg.sender,\n            address(token),\n            name,\n            symbol,\n            initialAmount\n        );\n        return address(token);\n    }\n}\n\ncontract CustomERC20 is ERC20Capped {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 cap,\n        address initialHolder\n    ) ERC20(name, symbol) ERC20Capped(cap) {\n        _mint(initialHolder, cap);\n    }\n\n    function _mint(address account, uint256 amount) internal override {\n        super._mint(account, amount);\n    }\n}\n"
    },
    "contracts/interfaces/IAuctionBot.sol": {
      "content": "pragma solidity ^0.8.2;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IAuctionBot {\n    //E1 - no longer in order placement phase\n    //E2 - no longer in order placement and cancelation phase\n    //E3 - Auction not in solution submission phase\n    //E4 - Auction not yet finished\n    //E5 - ReferralRewardManager cannot be zero address\n    //E6 - Fee is not allowed to be set higher than 2%\n    //E7 - Strategy is currently disabled\n    //E8 - referral fee cannot exceed 10%\n    //E9 - cannot auction zero tokens\n    //E10 - tokens cannot be auctioned for free\n    //E11 - minimumBiddingAmountPerOrder is not allowed to be zero\n    //E12 - time periods are not configured correctly\n    //E13 - auction end date must be in the future\n    //E14 - Only owner can create auctions with no strategy\n    //E15 - _minBuyAmounts must be greater than 0\n    //E16 - limit price not better than mimimal offer\n    //E17 - order too small\n    //E18 - referral code not registered\n    //E19 - referral code owner cannot be submitter\n    //E20 - reached end of order list\n    //E21 - too many orders summed up\n    //E22 - Only the user can cancel his orders\n    //E23 - only allowed to claim for same user\n    //E24 - order is no longer claimable\n    //E25 - User already registered\n    //E26 - Bidding token not registered\n\n    //structs\n    struct IClaimedFromOrder {\n        uint256 auctionId;\n        uint64 userId;\n        uint96 buyAmount;\n        uint96 sellAmount;\n        string referralCode;\n        uint256 referralFee;\n        uint256 auctioningTokenAmount;\n        uint256 biddingTokenAmount;\n    }\n    struct InitParams {\n        IERC20 _auctioningToken;\n        IERC20 _biddingToken;\n        uint256 _orderCancellationEndDate;\n        uint256 _auctionEndDate;\n        uint96 _auctionedSellAmount;\n        uint96 _minBuyAmount;\n        uint256 _minimumBiddingAmountPerOrder;\n        uint256 _minFundingThreshold;\n        uint256 _referralFeeNumerator;\n        uint256 _strategyId;\n        bytes32[] _strategyInitParams;\n    }\n    struct AuctionData {\n        IERC20 auctioningToken;\n        IERC20 biddingToken;\n        uint256 orderCancellationEndDate;\n        uint256 auctionEndDate;\n        bytes32 initialAuctionOrder;\n        uint256 minimumBiddingAmountPerOrder;\n        uint256 interimSumBidAmount;\n        bytes32 interimOrder;\n        bytes32 clearingPriceOrder;\n        uint96 volumeClearingPriceOrder;\n        bool minFundingThresholdNotReached;\n        uint256 minFundingThreshold;\n    }\n\n    //events\n    event NewSellOrder(\n        uint256 indexed auctionId,\n        uint64 indexed userId,\n        uint96 buyAmount,\n        uint96 sellAmount,\n        string referralCode\n    );\n    event CancellationSellOrder(\n        uint256 indexed auctionId,\n        uint64 indexed userId,\n        uint96 buyAmount,\n        uint96 sellAmount\n    );\n    event ClaimedFromOrder(IClaimedFromOrder params);\n    event NewUser(uint64 indexed userId, address indexed userAddress);\n    event NewAuction(\n        uint256 indexed auctionId,\n        IERC20 indexed _auctioningToken,\n        IERC20 indexed _biddingToken,\n        uint256 orderCancellationEndDate,\n        uint256 auctionEndDate,\n        uint64 userId,\n        uint96 _auctionedSellAmount,\n        uint96 _minBuyAmount,\n        uint256 minimumBiddingAmountPerOrder,\n        uint256 minFundingThreshold\n    );\n    event AuctionCleared(\n        uint256 indexed auctionId,\n        uint64 indexed userId,\n        uint96 buyAmount,\n        uint96 sellAmount,\n        uint96 soldAuctioningTokens,\n        uint96 soldBiddingTokens\n    );\n    event UserRegistration(address indexed user, uint64 userId);\n    event Distribution(uint256 indexed auctionId, uint256 amount);\n\n    //functions\n    function placeSellOrdersOnBehalf(\n        uint256 auctionId,\n        uint96[] calldata _minBuyAmounts,\n        uint96[] calldata _sellAmounts,\n        bytes32[] calldata _prevSellOrders,\n        address orderSubmitter,\n        string calldata referralCode\n    ) external returns (uint64 userId, uint256 sumOfSellAmounts);\n}\n"
    },
    "contracts/interfaces/IReferralRewardManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IReferralRewardManager {\n    function codeToAddress(\n        string calldata _code\n    ) external view returns (address);\n\n    function addressToCode(\n        address _account\n    ) external view returns (string memory);\n\n    function registerCode(string calldata _code) external;\n\n    function addToBalance(\n        string calldata referralCode,\n        uint256 _amount,\n        address _token\n    ) external;\n\n    function isCodeRegistered(\n        string calldata _code\n    ) external view returns (bool);\n\n    function referralCodeOwner(\n        string calldata referralCode\n    ) external view returns (address);\n\n    event Withdraw(address indexed account, uint256 amount, address token);\n    event BalanceIncrease(\n        address indexed account,\n        uint256 amount,\n        address token\n    );\n    event CodeRegistered(address indexed account, string code);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity ^0.8.2;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(\n        address tokenA,\n        address tokenB\n    ) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity ^0.8.2;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(\n        address to\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity ^0.8.2;\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router02Wrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./IUniswapV2Router02.sol\";\n\ninterface IUniswapV2Router02Wrapper {\n    function factory() external view returns (address);\n\n    function WETH() external view returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity ^0.8.2;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/libraries/IdToAddressBiMap.sol": {
      "content": "pragma solidity ^0.8.2;\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Contract does not have test coverage, as it was nearly copied from:\n// https://github.com/gnosis/solidity-data-structures/blob/master/contracts/libraries/IdToAddressBiMap.sol\n// The only change is uint16 -> uint64\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nlibrary IdToAddressBiMap {\n    struct Data {\n        mapping(uint64 => address) idToAddress;\n        mapping(address => uint64) addressToId;\n    }\n\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\n        return self.idToAddress[id + 1] != address(0);\n    }\n\n    function hasAddress(\n        Data storage self,\n        address addr\n    ) internal view returns (bool) {\n        return self.addressToId[addr] != 0;\n    }\n\n    function getAddressAt(\n        Data storage self,\n        uint64 id\n    ) internal view returns (address) {\n        require(hasId(self, id), \"Must have ID to get Address\");\n        return self.idToAddress[id + 1];\n    }\n\n    function getId(\n        Data storage self,\n        address addr\n    ) internal view returns (uint64) {\n        require(hasAddress(self, addr), \"Must have Address to get ID\");\n        return self.addressToId[addr] - 1;\n    }\n\n    function insert(\n        Data storage self,\n        uint64 id,\n        address addr\n    ) internal returns (bool) {\n        require(addr != address(0), \"Cannot insert zero address\");\n        require(id != type(uint64).max, \"Cannot insert max uint64\");\n        // Ensure bijectivity of the mappings\n        if (\n            self.addressToId[addr] != 0 ||\n            self.idToAddress[id + 1] != address(0)\n        ) {\n            return false;\n        }\n        self.idToAddress[id + 1] = addr;\n        self.addressToId[addr] = id + 1;\n        return true;\n    }\n}\n"
    },
    "contracts/libraries/IterableOrderedOrderSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"hardhat/console.sol\";\n\nlibrary IterableOrderedOrderSet {\n    using SafeMath for uint96;\n    using IterableOrderedOrderSet for bytes32;\n\n    // represents smallest possible value for an order under comparison of fn smallerThan()\n    bytes32 internal constant QUEUE_START =\n        0x0000000000000000000000000000000000000000000000000000000000000001;\n    // represents highest possible value for an order under comparison of fn smallerThan()\n    bytes32 internal constant QUEUE_END =\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\n\n    /// The struct is used to implement a modified version of a doubly linked\n    /// list with sorted elements. The list starts from QUEUE_START to\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\n    /// Nodes can be added or removed.\n    ///\n    /// `next` and `prev` have a different role. The list is supposed to be\n    /// traversed with `next`. If `next` is empty, the node is not part of the\n    /// list. However, `prev` might be set for elements that are not in the\n    /// list, which is why it should not be used for traversing. Having a `prev`\n    /// set for elements not in the list is used to keep track of the history of\n    /// the position in the list of a removed element.\n    struct Data {\n        mapping(bytes32 => bytes32) nextMap;\n        mapping(bytes32 => bytes32) prevMap;\n    }\n\n    struct Order {\n        uint64 owner;\n        uint96 buyAmount;\n        uint96 sellAmount;\n    }\n\n    function initializeEmptyList(Data storage self) internal {\n        self.nextMap[QUEUE_START] = QUEUE_END;\n        self.prevMap[QUEUE_END] = QUEUE_START;\n    }\n\n    function isEmpty(Data storage self) internal view returns (bool) {\n        return self.nextMap[QUEUE_START] == QUEUE_END;\n    }\n\n    function insert(\n        Data storage self,\n        bytes32 elementToInsert,\n        bytes32 elementBeforeNewOne\n    ) internal returns (bool) {\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\n        require(denominator != uint96(0), \"Inserting zero is not supported\");\n        require(\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\n            \"Inserting element is not valid\"\n        );\n        if (contains(self, elementToInsert)) {\n            return false;\n        }\n        if (\n            elementBeforeNewOne != QUEUE_START &&\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\n        ) {\n            return false;\n        }\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\n            return false;\n        }\n\n        // `elementBeforeNewOne` might have been removed during the time it\n        // took to the transaction calling this function to be mined, so\n        // the new order cannot be appended directly to this. We follow the\n        // history of previous links backwards until we find an element in\n        // the list from which to start our search.\n        // Note that following the link backwards returns elements that are\n        // before `elementBeforeNewOne` in sorted order.\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\n        }\n\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\n        // largest entry that is smaller than the element to insert.\n        bytes32 previous;\n        bytes32 current = elementBeforeNewOne;\n        do {\n            previous = current;\n            current = self.nextMap[current];\n        } while (current.smallerThan(elementToInsert));\n        // Note: previous < elementToInsert < current\n        self.nextMap[previous] = elementToInsert;\n        self.prevMap[current] = elementToInsert;\n        self.prevMap[elementToInsert] = previous;\n        self.nextMap[elementToInsert] = current;\n\n        return true;\n    }\n\n    /// The element is removed from the linked list, but the node retains\n    /// information on which predecessor it had, so that a node in the chain\n    /// can be reached by following the predecessor chain of deleted elements.\n    function removeKeepHistory(\n        Data storage self,\n        bytes32 elementToRemove\n    ) internal returns (bool) {\n        if (!contains(self, elementToRemove)) {\n            return false;\n        }\n        bytes32 previousElement = self.prevMap[elementToRemove];\n        bytes32 nextElement = self.nextMap[elementToRemove];\n        self.nextMap[previousElement] = nextElement;\n        self.prevMap[nextElement] = previousElement;\n        self.nextMap[elementToRemove] = bytes32(0);\n        return true;\n    }\n\n    /// Remove an element from the chain, clearing all related storage.\n    /// Note that no elements should be inserted using as a reference point a\n    /// node deleted after calling `remove`, since an element in the `prev`\n    /// chain might be missing.\n    function remove(\n        Data storage self,\n        bytes32 elementToRemove\n    ) internal returns (bool) {\n        bool result = removeKeepHistory(self, elementToRemove);\n        if (result) {\n            self.prevMap[elementToRemove] = bytes32(0);\n        }\n        return result;\n    }\n\n    function contains(\n        Data storage self,\n        bytes32 value\n    ) internal view returns (bool) {\n        if (value == QUEUE_START) {\n            return false;\n        }\n        // Note: QUEUE_END is not contained in the list since it has no\n        // successor.\n        return self.nextMap[value] != bytes32(0);\n    }\n\n    // @dev orders are ordered by\n    // 1. their price - buyAmount/sellAmount\n    // 2. by the sellAmount\n    // 3. their userId,\n    function smallerThan(\n        bytes32 orderLeft,\n        bytes32 orderRight\n    ) internal pure returns (bool) {\n        (\n            uint64 userIdLeft,\n            uint96 priceNumeratorLeft,\n            uint96 priceDenominatorLeft\n        ) = decodeOrder(orderLeft);\n        (\n            uint64 userIdRight,\n            uint96 priceNumeratorRight,\n            uint96 priceDenominatorRight\n        ) = decodeOrder(orderRight);\n\n        if (\n            priceNumeratorLeft.mul(priceDenominatorRight) <\n            priceNumeratorRight.mul(priceDenominatorLeft)\n        ) return true;\n        if (\n            priceNumeratorLeft.mul(priceDenominatorRight) >\n            priceNumeratorRight.mul(priceDenominatorLeft)\n        ) return false;\n\n        if (priceNumeratorLeft < priceNumeratorRight) return true;\n        if (priceNumeratorLeft > priceNumeratorRight) return false;\n        require(\n            userIdLeft != userIdRight,\n            \"user is not allowed to place same order twice\"\n        );\n        if (userIdLeft < userIdRight) {\n            return true;\n        }\n        return false;\n    }\n\n    function first(Data storage self) internal view returns (bytes32) {\n        require(!isEmpty(self), \"Trying to get first from empty set\");\n        return self.nextMap[QUEUE_START];\n    }\n\n    function next(\n        Data storage self,\n        bytes32 value\n    ) internal view returns (bytes32) {\n        require(value != QUEUE_END, \"Trying to get next of last element\");\n        bytes32 nextElement = self.nextMap[value];\n        require(\n            nextElement != bytes32(0),\n            \"Trying to get next of non-existent element\"\n        );\n        return nextElement;\n    }\n\n    function decodeOrder(\n        bytes32 _orderData\n    )\n        internal\n        pure\n        returns (uint64 userId, uint96 buyAmount, uint96 sellAmount)\n    {\n        // Note: converting to uint discards the binary digits that do not fit\n        // the type.\n        userId = uint64(uint256(_orderData) >> 192);\n        buyAmount = uint96(uint256(_orderData) >> 96);\n        sellAmount = uint96(uint256(_orderData));\n    }\n\n    function encodeOrder(\n        uint64 userId,\n        uint96 buyAmount,\n        uint96 sellAmount\n    ) internal pure returns (bytes32) {\n        return\n            bytes32(\n                (uint256(userId) << 192) +\n                    (uint256(buyAmount) << 96) +\n                    uint256(sellAmount)\n            );\n    }\n}\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\n */\nlibrary SafeCast {\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value < 2 ** 96, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2 ** 64, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n}\n"
    },
    "contracts/ReferralRewardManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IReferralRewardManager.sol\";\n\n/**\n * @title ReferralRewardManager\n * This is the contract that handles the referral rewards\n */\ncontract ReferralRewardManager is\n    IReferralRewardManager,\n    ReentrancyGuard,\n    Ownable\n{\n    using SafeERC20 for IERC20;\n\n    mapping(string => address) public override codeToAddress;\n    mapping(address => string) public override addressToCode;\n\n    mapping(address => mapping(address => uint256)) public balances;\n\n    address public auctionBot;\n\n    bool public withdrawOpen = false;\n\n    constructor() ReentrancyGuard() Ownable() {}\n\n    modifier onlyOwnerOrAuction() {\n        require(\n            msg.sender == owner() || msg.sender == auctionBot,\n            \"ReferralRewardManager: unauthorized\"\n        );\n        _;\n    }\n\n    function isCodeRegistered(\n        string memory _code\n    ) public view override returns (bool) {\n        return codeToAddress[_code] != address(0);\n    }\n\n    function referralCodeOwner(\n        string memory referralCode\n    ) public view override returns (address) {\n        return codeToAddress[referralCode];\n    }\n\n    function registerCode(string memory _code) public override {\n        require(\n            bytes(_code).length > 0,\n            \"ReferralRewardManager: code cannot be empty\"\n        );\n        require(\n            bytes(_code).length <= 8,\n            \"ReferralRewardManager: code cannot be above 8\"\n        );\n\n        require(\n            codeToAddress[_code] == address(0),\n            \"ReferralRewardManager: code already registered or address already has code\"\n        );\n\n        codeToAddress[_code] = msg.sender;\n        addressToCode[msg.sender] = _code;\n\n        emit CodeRegistered(msg.sender, _code);\n    }\n\n    function addToBalance(\n        string memory _referralCode,\n        uint256 _amount,\n        address _token\n    ) public override onlyOwnerOrAuction {\n        require(\n            isCodeRegistered(_referralCode),\n            \"ReferralRewardManager: code not registered\"\n        );\n\n        address account = codeToAddress[_referralCode];\n\n        balances[account][_token] = balances[account][_token] + (_amount);\n\n        emit BalanceIncrease(account, _amount, _token);\n    }\n\n    function withdraw(uint256 _amount, address _token) public nonReentrant {\n        require(withdrawOpen, \"ReferralRewardManager: withdraw not open\");\n        require(_amount > 0, \"ReferralRewardManager: amount cannot be 0\");\n        require(\n            balances[msg.sender][_token] >= _amount,\n            \"ReferralRewardManager: insufficient balance\"\n        );\n\n        balances[msg.sender][_token] = balances[msg.sender][_token] - (_amount);\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n\n        emit Withdraw(msg.sender, _amount, _token);\n    }\n\n    function adminOverride(\n        address _account,\n        string memory _code\n    ) public onlyOwner {\n        delete codeToAddress[addressToCode[_account]];\n\n        codeToAddress[_code] = _account;\n        addressToCode[_account] = _code;\n\n        emit CodeRegistered(_account, _code);\n    }\n\n    function setAuctionBot(address _auction) public onlyOwner {\n        auctionBot = _auction;\n    }\n\n    function openWithdraw() public onlyOwner {\n        withdrawOpen = true;\n    }\n\n    // receive eth\n    receive() external payable {}\n}\n"
    },
    "contracts/strategies/interfaces/IStrategy.sol": {
      "content": "pragma solidity ^0.8.2;\n\ninterface IStrategy {\n    function execute(\n        uint256 _amount,\n        address _token,\n        uint256 _auctionId,\n        address _user\n    ) external;\n\n    function init(\n        uint256 _auctionId,\n        address _token,\n        bytes32[] memory initParams\n    ) external;\n}\n"
    },
    "contracts/strategies/interfaces/IStrategyManager.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"./IStrategy.sol\";\n\nstruct StrategyData {\n    IStrategy strategyContract;\n    bool enabled;\n}\n\ninterface IStrategyManager {\n    event StrategyCreated(uint256 _index, address _strategy);\n    event StrategyDisabled(uint256 _index, address _strategy);\n    event StrategyEnabled(uint256 _index, address _strategy);\n\n    function getStrategy(uint256 _id) external returns (StrategyData memory);\n}\n"
    },
    "contracts/strategies/Strategy.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nabstract contract Strategy is AccessControl {\n    event StrategyCreated(uint256 _auctionId, address _token);\n    event StrategyExecuted(\n        uint256 _amount,\n        address _token,\n        uint256 _auctionId,\n        address _user\n    );\n\n    bytes32 internal constant AUCTION_CONTROLLER_ROLE =\n        keccak256(\"AUCTION_CONTROLLER_ROLE\");\n\n    constructor(address _auction) AccessControl() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(AUCTION_CONTROLLER_ROLE, _auction);\n    }\n\n    function execute(\n        uint256 _amount,\n        address _token,\n        uint256 _auctionId,\n        address _user\n    ) external virtual;\n\n    function init(\n        uint256 _auctionId,\n        address _token,\n        bytes32[] memory initParams\n    ) external virtual;\n}\n"
    },
    "contracts/strategies/StrategyManager.sol": {
      "content": "pragma solidity ^0.8.2;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IStrategyManager.sol\";\nimport \"./interfaces/IStrategy.sol\";\n\ncontract StrategyManager is IStrategyManager, Ownable {\n    mapping(uint256 => StrategyData) public strategies;\n    uint256 public numStrategies = 2;\n\n    constructor() Ownable() {}\n\n    function getStrategy(\n        uint256 _id\n    ) external view override returns (StrategyData memory) {\n        return strategies[_id];\n    }\n\n    function addStrategy(address _strategyContract) external onlyOwner {\n        require(_strategyContract != address(0), \"Strategy address invalid\");\n        uint256 strategyIndex = numStrategies++;\n        strategies[strategyIndex] = StrategyData(\n            IStrategy(_strategyContract),\n            true\n        );\n        emit StrategyCreated(strategyIndex, _strategyContract);\n    }\n\n    function enableStrategy(uint _strategyIndex) external onlyOwner {\n        require(_strategyIndex <= numStrategies, \"Invalid strategy\");\n        strategies[_strategyIndex].enabled = true;\n        emit StrategyEnabled(\n            _strategyIndex,\n            address(strategies[_strategyIndex].strategyContract)\n        );\n    }\n\n    function disableStrategy(uint _strategyIndex) external onlyOwner {\n        require(_strategyIndex <= numStrategies, \"Invalid strategy\");\n        strategies[_strategyIndex].enabled = false;\n        emit StrategyDisabled(\n            _strategyIndex,\n            address(strategies[_strategyIndex].strategyContract)\n        );\n    }\n}\n"
    },
    "contracts/strategies/vesting/interfaces/ITokenVesting.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.2;\n\ninterface ITokenVesting {\n    function initialize(\n        address _token,\n        uint256 _cliffDuration,\n        uint256 _vestingDuration\n    ) external;\n\n    function vestTokens(\n        address beneficiary,\n        uint256 totalAllocation,\n        uint256 start\n    ) external;\n}\n"
    },
    "contracts/strategies/vesting/TokenVesting.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/// @title TokenVesting\n/// @dev This contract allows vesting of an ERC20 token with multiple beneficiary.\n/// Each beneficiary can have a different vesting schedule.\n/// This implementation uses timestamps, not block numbers.\n/// Based on openzeppelin's {VestingWallet}\ncontract TokenVesting is AccessControl {\n    using SafeERC20 for IERC20;\n\n    event NewBeneficiary(\n        address indexed beneficiary,\n        uint256 totalAllocation,\n        uint256 startTimestamp,\n        uint256 cliffDuration,\n        uint256 duration,\n        bytes32 vestingKey\n    );\n    event Released(address indexed beneficiary, uint256 amount);\n    event Revoked(address indexed revokee, uint256 amount);\n\n    struct VestingSchedule {\n        uint256 totalAllocation;\n        uint256 start;\n        uint256 released;\n        address beneficiary;\n    }\n\n    uint256 cliffDuration;\n    uint256 duration;\n\n    IERC20 public token;\n    mapping(bytes32 => VestingSchedule) public vestingSchedules;\n    mapping(address => uint256) public holderVestingCount;\n\n    constructor(\n        address _token,\n        uint256 _cliffDuration,\n        uint256 _vestingDuration\n    ) {\n        require(_token != address(0), \"Invalid token\");\n        token = IERC20(_token);\n        cliffDuration = _cliffDuration;\n        duration = _vestingDuration;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function computeVestingScheduleIdForAddressAndIndex(\n        address holder,\n        uint256 index\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(holder, index));\n    }\n\n    function vestTokens(\n        address beneficiary,\n        uint256 totalAllocation,\n        uint256 start\n    ) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        bytes32 vestingKey = computeVestingScheduleIdForAddressAndIndex(\n            beneficiary,\n            holderVestingCount[beneficiary]++\n        );\n        require(beneficiary != address(0), \"Invalid beneficiary\");\n        require(\n            vestingSchedules[vestingKey].totalAllocation == 0,\n            \"Beneficiary already exists\"\n        );\n        require(totalAllocation > 0, \"Invalid allocation\");\n        require(start > block.timestamp, \"Invalid start\");\n        require(duration > 0, \"Invalid duration\");\n        require(duration > cliffDuration, \"Invalid cliff\");\n\n        vestingSchedules[vestingKey] = VestingSchedule({\n            totalAllocation: totalAllocation,\n            start: start,\n            released: 0,\n            beneficiary: beneficiary\n        });\n\n        emit NewBeneficiary(\n            beneficiary,\n            totalAllocation,\n            start,\n            cliffDuration,\n            duration,\n            vestingKey\n        );\n    }\n\n    /// @notice Releases tokens that have already vested\n    /// @dev Emits a {Released} event\n    function releaseAll(address _account) public {\n        for (uint index = 0; index < holderVestingCount[_account]; index++) {\n            bytes32 _key = computeVestingScheduleIdForAddressAndIndex(\n                _account,\n                index\n            );\n            release(_key);\n        }\n    }\n\n    /// @notice Releases tokens that have already vested\n    /// @dev Emits a {Released} event\n    function release(bytes32 _key) public virtual {\n        uint256 releasable = releasableAmount(_key);\n        require(releasable > 0, \"No releasable tokens\");\n\n        VestingSchedule storage vestingSchedule = vestingSchedules[_key];\n\n        vestingSchedule.released += releasable;\n        token.safeTransfer(vestingSchedule.beneficiary, releasable);\n\n        emit Released(msg.sender, releasable);\n    }\n\n    function lockedAmount(bytes32 _key) external view returns (uint256) {\n        return vestingSchedules[_key].totalAllocation - vestedAmount(_key);\n    }\n\n    function releasableAmount(\n        bytes32 _key\n    ) public view virtual returns (uint256) {\n        return vestedAmount(_key) - vestingSchedules[_key].released;\n    }\n\n    function vestedAmount(bytes32 _key) public view virtual returns (uint256) {\n        return _vestingSchedule(vestingSchedules[_key], block.timestamp);\n    }\n\n    /// @dev Implementation of the vesting formula. This returns the amout vested, as a function of time, for\n    /// an asset given its total historical allocation.\n    /// @param schedule The vesting schedule to use in the calculation\n    /// @param timestamp The timestamp to use in the calculation\n    function _vestingSchedule(\n        VestingSchedule memory schedule,\n        uint256 timestamp\n    ) internal view virtual returns (uint256) {\n        if (duration == 0 || timestamp < schedule.start + cliffDuration) {\n            return 0;\n        } else if (timestamp > schedule.start + duration) {\n            return schedule.totalAllocation;\n        } else {\n            return\n                (schedule.totalAllocation * (timestamp - schedule.start)) /\n                duration;\n        }\n    }\n}\n"
    },
    "contracts/strategies/vesting/TokenVestingFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.2;\n\nimport \"../Strategy.sol\";\nimport \"./TokenVesting.sol\";\nimport \"./interfaces/ITokenVesting.sol\";\n\nstruct StrategyParams {\n    uint256 maxCliffDuration;\n    uint256 maxVestDuration;\n    uint256 minCliffDuration;\n    uint256 minVestDuration;\n}\n\ncontract TokenVestingFactory is Strategy {\n    bytes32 internal constant OWNER = keccak256(\"OWNER\");\n\n    error InvalidParams();\n    error InvalidVestingStrategy();\n\n    StrategyParams public strategyParams;\n\n    constructor(\n        address _auction,\n        StrategyParams memory _params\n    ) Strategy(_auction) {\n        if (\n            _params.minVestDuration == 0 ||\n            (_params.minCliffDuration > _params.maxCliffDuration) ||\n            (_params.minVestDuration > _params.minVestDuration)\n        ) revert InvalidParams();\n\n        strategyParams = _params;\n\n        _grantRole(OWNER, msg.sender);\n    }\n\n    //auction id-> vesting contract address\n    mapping(uint => address) vestingStrategy;\n\n    function updateStrategyParams(\n        StrategyParams memory _params\n    ) external onlyRole(OWNER) {\n        if (\n            _params.minVestDuration == 0 ||\n            (_params.minCliffDuration > _params.maxCliffDuration) ||\n            (_params.minVestDuration > _params.minVestDuration)\n        ) revert InvalidParams();\n        strategyParams = _params;\n    }\n\n    function init(\n        uint256 _auctionId,\n        address _token,\n        bytes32[] memory initParams\n    ) external override onlyRole(AUCTION_CONTROLLER_ROLE) {\n        require(\n            vestingStrategy[_auctionId] == address(0),\n            \"Strategy already created\"\n        );\n        uint256 cliffDuration = uint256(initParams[0]);\n        uint256 vestingDuration = uint256(initParams[1]);\n        if (\n            vestingDuration < strategyParams.minVestDuration ||\n            vestingDuration > strategyParams.maxVestDuration ||\n            cliffDuration < strategyParams.minCliffDuration ||\n            cliffDuration > strategyParams.maxCliffDuration\n        ) revert InvalidVestingStrategy();\n        TokenVesting vesting = new TokenVesting(\n            _token,\n            cliffDuration,\n            vestingDuration\n        );\n        vestingStrategy[_auctionId] = address(vesting);\n        emit StrategyCreated(_auctionId, _token);\n    }\n\n    function execute(\n        uint256 _amount,\n        address _token,\n        uint256 _auctionId,\n        address _user\n    ) external override onlyRole(AUCTION_CONTROLLER_ROLE) {\n        IERC20(_token).transfer(vestingStrategy[_auctionId], _amount);\n        ITokenVesting(vestingStrategy[_auctionId]).vestTokens(\n            _user,\n            _amount,\n            block.timestamp\n        );\n\n        emit StrategyExecuted(_amount, _token, _auctionId, _user);\n    }\n}\n"
    },
    "contracts/test/AuctionBotV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../interfaces/IAuctionBot.sol\";\nimport \"../interfaces/IReferralRewardManager.sol\";\nimport \"../interfaces/IUniswapV2Router02.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"../libraries/IterableOrderedOrderSet.sol\";\nimport \"../libraries/IdToAddressBiMap.sol\";\nimport \"../libraries/SafeCast.sol\";\nimport \"../strategies/interfaces/IStrategyManager.sol\";\nimport \"../AuctionBot.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract AuctionBotV2 is\n    IAuctionBot,\n    Initializable,\n    OwnableUpgradeable,\n    UUPSUpgradeable\n{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint64;\n    using SafeMath for uint96;\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\n    using IterableOrderedOrderSet for bytes32;\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\n\n    modifier atStageOrderPlacement(uint256 auctionId) {\n        require(\n            (block.timestamp < auctionData[auctionId].auctionEndDate),\n            \"E1\"\n        );\n        _;\n    }\n\n    modifier atStageOrderPlacementAndCancelation(uint256 auctionId) {\n        require(\n            (block.timestamp < auctionData[auctionId].orderCancellationEndDate),\n            \"E2\"\n        );\n        _;\n    }\n\n    modifier atStageSolutionSubmission(uint256 auctionId) {\n        {\n            uint256 auctionEndDate = auctionData[auctionId].auctionEndDate;\n            require(\n                (auctionEndDate != 0 &&\n                    block.timestamp >= auctionEndDate &&\n                    auctionData[auctionId].clearingPriceOrder == bytes32(0)),\n                \"E3\"\n            );\n        }\n        _;\n    }\n\n    modifier atStageFinished(uint256 auctionId) {\n        require(\n            (auctionData[auctionId].clearingPriceOrder != bytes32(0)),\n            \"E4\"\n        );\n        _;\n    }\n\n    mapping(uint256 => uint256) public auctionToStrategy;\n    mapping(uint256 => uint256) public referralFeeNumerator;\n    mapping(uint256 => mapping(bytes32 => string)) public referrals;\n    mapping(uint256 => IterableOrderedOrderSet.Data) internal sellOrders;\n    mapping(uint256 => AuctionData) public auctionData;\n    mapping(address => bool) public biddingTokenWhitelist;\n\n    IdToAddressBiMap.Data private registeredUsers;\n    uint64 public numUsers;\n    uint256 public auctionCounter;\n\n    uint256 public feeNumerator;\n    uint256 public constant FEE_DENOMINATOR = 1000;\n    uint64 public feeReceiverUserId;\n\n    IReferralRewardManager public referralRewardManager;\n    IStrategyManager public strategyManager;\n    IUniswapV2Router02 public uniswapV2Router;\n\n    bool public upgradedToV2;\n    uint256 public v2Uint;\n\n    error EthSendingFailed();\n\n    function initialize(\n        IReferralRewardManager _referralRewardManager,\n        IStrategyManager _strategyManager,\n        address _feeReceiverAddress,\n        IUniswapV2Router02 _uniswapV2Router,\n        address[] memory _biddingTokenWhitelist,\n        uint256 _feeNumerator\n    ) external initializer {\n        require((address(_referralRewardManager) != address(0)), \"E5\");\n\n        __Ownable_init();\n        referralRewardManager = _referralRewardManager;\n        strategyManager = _strategyManager;\n        setFeeParameters(_feeNumerator, _feeReceiverAddress);\n\n        uniswapV2Router = _uniswapV2Router;\n\n        for (uint256 i = 0; i < _biddingTokenWhitelist.length; i++) {\n            biddingTokenWhitelist[_biddingTokenWhitelist[i]] = true;\n        }\n    }\n\n    function initializeV2(uint256 _v2Uint) external {\n        require(!upgradedToV2, \"V2 already initialized\");\n\n        v2Uint = _v2Uint;\n    }\n\n    receive() external payable {}\n\n    ///@dev required by the OZ UUPS module\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    function setFeeParameters(\n        uint256 newFeeNumerator,\n        address newfeeReceiverAddress\n    ) public onlyOwner {\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\n        feeReceiverUserId = getUserId(newfeeReceiverAddress);\n        feeNumerator = newFeeNumerator;\n    }\n\n    function addBiddingTokenToWhitelist(address tokenAddress) public onlyOwner {\n        biddingTokenWhitelist[tokenAddress] = true;\n    }\n\n    function removeBiddingTokenFromWhitelist(\n        address tokenAddress\n    ) public onlyOwner {\n        biddingTokenWhitelist[tokenAddress] = false;\n    }\n\n    function initiateAuction(\n        InitParams memory params\n    ) public returns (uint256) {\n        // withdraws sellAmount\n        if (params._strategyId != 0) {\n            params._auctioningToken.safeTransferFrom(\n                msg.sender,\n                address(this),\n                params._auctionedSellAmount\n            );\n        }\n        auctionCounter = auctionCounter.add(1);\n        if (params._strategyId > 1) {\n            StrategyData memory strategy = strategyManager.getStrategy(\n                params._strategyId\n            );\n            require(strategy.enabled, \"E7\");\n            strategy.strategyContract.init(\n                auctionCounter,\n                address(params._auctioningToken),\n                params._strategyInitParams\n            );\n        }\n\n        require((params._referralFeeNumerator <= 100), \"E8\");\n        require((params._auctionedSellAmount > 0), \"E9\");\n        require((params._minBuyAmount > 0), \"E10\");\n        require((params._minimumBiddingAmountPerOrder > 0), \"E11\");\n        require(\n            (params._orderCancellationEndDate <= params._auctionEndDate),\n            \"E12\"\n        );\n        require((params._auctionEndDate > block.timestamp), \"E13\");\n        require(\n            ((params._strategyId == 0 && msg.sender == owner()) ||\n                params._strategyId > 0),\n            \"E14\"\n        );\n        require((biddingTokenWhitelist[address(params._biddingToken)]), \"E26\");\n\n        sellOrders[auctionCounter].initializeEmptyList();\n        uint64 userId = getUserId(msg.sender);\n        auctionData[auctionCounter] = AuctionData(\n            params._auctioningToken,\n            params._biddingToken,\n            params._orderCancellationEndDate,\n            params._auctionEndDate,\n            IterableOrderedOrderSet.encodeOrder(\n                userId,\n                params._minBuyAmount,\n                params._auctionedSellAmount\n            ),\n            params._minimumBiddingAmountPerOrder,\n            0,\n            IterableOrderedOrderSet.QUEUE_START,\n            bytes32(0),\n            0,\n            false,\n            params._minFundingThreshold\n        );\n        auctionToStrategy[auctionCounter] = params._strategyId;\n        referralFeeNumerator[auctionCounter] = params._referralFeeNumerator;\n        emit NewAuction(\n            auctionCounter,\n            params._auctioningToken,\n            params._biddingToken,\n            params._orderCancellationEndDate,\n            params._auctionEndDate,\n            userId,\n            params._auctionedSellAmount,\n            params._minBuyAmount,\n            params._minimumBiddingAmountPerOrder,\n            params._minFundingThreshold\n        );\n        return auctionCounter;\n    }\n\n    function placeSellOrders(\n        uint256 auctionId,\n        uint96[] calldata _minBuyAmounts,\n        uint96[] calldata _sellAmounts,\n        bytes32[] calldata _prevSellOrders,\n        string calldata referralCode\n    )\n        external\n        atStageOrderPlacement(auctionId)\n        returns (uint64 userId, uint256 sumOfSellAmounts)\n    {\n        return\n            _placeSellOrders(\n                auctionId,\n                _minBuyAmounts,\n                _sellAmounts,\n                _prevSellOrders,\n                msg.sender,\n                referralCode\n            );\n    }\n\n    function placeSellOrdersOnBehalf(\n        uint256 auctionId,\n        uint96[] calldata _minBuyAmounts,\n        uint96[] calldata _sellAmounts,\n        bytes32[] calldata _prevSellOrders,\n        address orderSubmitter,\n        string calldata referralCode\n    )\n        external\n        atStageOrderPlacement(auctionId)\n        returns (uint64 userId, uint256 sumOfSellAmounts)\n    {\n        return\n            _placeSellOrders(\n                auctionId,\n                _minBuyAmounts,\n                _sellAmounts,\n                _prevSellOrders,\n                orderSubmitter,\n                referralCode\n            );\n    }\n\n    function _placeSellOrders(\n        uint256 auctionId,\n        uint96[] memory _minBuyAmounts,\n        uint96[] memory _sellAmounts,\n        bytes32[] memory _prevSellOrders,\n        address orderSubmitter,\n        string memory referralCode\n    ) internal returns (uint64 userId, uint256 sumOfSellAmounts) {\n        {\n            (\n                ,\n                uint96 buyAmountOfInitialAuctionOrder,\n                uint96 sellAmountOfInitialAuctionOrder\n            ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\n            for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\n                require(\n                    _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\n                        sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\n                    \"E16\"\n                );\n            }\n        }\n        userId = getUserId(orderSubmitter);\n        uint256 minimumBiddingAmountPerOrder = auctionData[auctionId]\n            .minimumBiddingAmountPerOrder;\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\n            require((_minBuyAmounts[i] > 0), \"E15\");\n            // orders should have a minimum bid size in order to limit the gas\n            // required to compute the final price of the auction.\n            require((_sellAmounts[i] > minimumBiddingAmountPerOrder), \"E17\");\n            bytes32 encodedOrder = IterableOrderedOrderSet.encodeOrder(\n                userId,\n                _minBuyAmounts[i],\n                _sellAmounts[i]\n            );\n            if (\n                sellOrders[auctionId].insert(encodedOrder, _prevSellOrders[i])\n            ) {\n                if (bytes(referralCode).length != 0) {\n                    require(\n                        (referralRewardManager.isCodeRegistered(referralCode)),\n                        \"E18\"\n                    );\n                    require(\n                        (referralRewardManager.referralCodeOwner(\n                            referralCode\n                        ) != orderSubmitter),\n                        \"E19\"\n                    );\n                    referrals[auctionId][encodedOrder] = referralCode;\n                }\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\n                emit NewSellOrder(\n                    auctionId,\n                    userId,\n                    _minBuyAmounts[i],\n                    _sellAmounts[i],\n                    referralCode\n                );\n            }\n        }\n        auctionData[auctionId].biddingToken.safeTransferFrom(\n            msg.sender,\n            address(this),\n            sumOfSellAmounts\n        ); //[1]\n    }\n\n    function cancelSellOrders(\n        uint256 auctionId,\n        bytes32[] memory _sellOrders\n    ) public atStageOrderPlacementAndCancelation(auctionId) {\n        uint64 userId = getUserId(msg.sender);\n        uint256 claimableAmount = 0;\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\n            // Note: we keep the back pointer of the deleted element so that\n            // it can be used as a reference point to insert a new node.\n            delete referrals[auctionId][_sellOrders[i]];\n            bool success = sellOrders[auctionId].removeKeepHistory(\n                _sellOrders[i]\n            );\n            if (success) {\n                (\n                    uint64 userIdOfIter,\n                    uint96 buyAmountOfIter,\n                    uint96 sellAmountOfIter\n                ) = _sellOrders[i].decodeOrder();\n                require((userIdOfIter == userId), \"E22\");\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\n                emit CancellationSellOrder(\n                    auctionId,\n                    userId,\n                    buyAmountOfIter,\n                    sellAmountOfIter\n                );\n            }\n        }\n\n        auctionData[auctionId].biddingToken.safeTransfer(\n            msg.sender,\n            claimableAmount\n        ); //[2]\n    }\n\n    function precalculateSellAmountSum(\n        uint256 auctionId,\n        uint256 iterationSteps\n    ) public atStageSolutionSubmission(auctionId) {\n        (, , uint96 auctioneerSellAmount) = auctionData[auctionId]\n            .initialAuctionOrder\n            .decodeOrder();\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\n        for (uint256 i = 0; i < iterationSteps; i++) {\n            iterOrder = sellOrders[auctionId].next(iterOrder);\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\n        }\n        require((iterOrder != IterableOrderedOrderSet.QUEUE_END), \"E20\");\n        // it is checked that not too many iteration steps were taken:\n        // require that the sum of SellAmounts times the price of the last order\n        // is not more than initially sold amount\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) = iterOrder\n            .decodeOrder();\n        require(\n            sumBidAmount.mul(buyAmountOfIter) <\n                auctioneerSellAmount.mul(sellAmountOfIter),\n            \"E21\"\n        );\n        auctionData[auctionId].interimSumBidAmount = sumBidAmount;\n        auctionData[auctionId].interimOrder = iterOrder;\n    }\n\n    // @dev function settling the auction and calculating the price\n    function settleAuction(\n        uint256 auctionId\n    )\n        public\n        atStageSolutionSubmission(auctionId)\n        returns (bytes32 clearingOrder)\n    {\n        (\n            uint64 auctioneerId,\n            uint96 minAuctionedBuyAmount,\n            uint96 fullAuctionedAmount\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\n        uint256 currentBidSum = auctionData[auctionId].interimSumBidAmount;\n        bytes32 currentOrder = auctionData[auctionId].interimOrder;\n        uint256 buyAmountOfIter;\n        uint256 sellAmountOfIter;\n        uint96 fillVolumeOfAuctioneerOrder = fullAuctionedAmount;\n        // Sum order up, until fullAuctionedAmount is fully bought or queue end is reached\n        do {\n            bytes32 nextOrder = sellOrders[auctionId].next(currentOrder);\n            if (nextOrder == IterableOrderedOrderSet.QUEUE_END) {\n                break;\n            }\n            currentOrder = nextOrder;\n            (, buyAmountOfIter, sellAmountOfIter) = currentOrder.decodeOrder();\n            currentBidSum = currentBidSum.add(sellAmountOfIter);\n        } while (\n            currentBidSum.mul(buyAmountOfIter) <\n                fullAuctionedAmount.mul(sellAmountOfIter)\n        );\n        if (\n            currentBidSum > 0 &&\n            currentBidSum.mul(buyAmountOfIter) >=\n            fullAuctionedAmount.mul(sellAmountOfIter)\n        ) {\n            // All considered/summed orders are sufficient to close the auction fully\n            // at price between current and previous orders.\n            uint256 uncoveredBids = currentBidSum.sub(\n                fullAuctionedAmount.mul(sellAmountOfIter).div(buyAmountOfIter)\n            );\n            if (sellAmountOfIter >= uncoveredBids) {\n                //[13]\n                // Auction fully filled via partial match of currentOrder\n                uint256 sellAmountClearingOrder = sellAmountOfIter.sub(\n                    uncoveredBids\n                );\n                auctionData[auctionId]\n                    .volumeClearingPriceOrder = sellAmountClearingOrder\n                    .toUint96();\n                currentBidSum = currentBidSum.sub(uncoveredBids);\n                clearingOrder = currentOrder;\n            } else {\n                //[14]\n                // Auction fully filled via price strictly between currentOrder and the order\n                // immediately before. For a proof, see the security-considerations.md\n                currentBidSum = currentBidSum.sub(sellAmountOfIter);\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\n                    0,\n                    fullAuctionedAmount,\n                    currentBidSum.toUint96()\n                );\n            }\n        } else {\n            // All considered/summed orders are not sufficient to close the auction fully at price of last order //[18]\n            // Either a higher price must be used or auction is only partially filled\n            if (currentBidSum > minAuctionedBuyAmount) {\n                //[15]\n                // Price higher than last order would fill the auction\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\n                    0,\n                    fullAuctionedAmount,\n                    currentBidSum.toUint96()\n                );\n            } else {\n                //[16]\n                // Even at the initial auction price, the auction is partially filled\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\n                    0,\n                    fullAuctionedAmount,\n                    minAuctionedBuyAmount\n                );\n                fillVolumeOfAuctioneerOrder = currentBidSum\n                    .mul(fullAuctionedAmount)\n                    .div(minAuctionedBuyAmount)\n                    .toUint96();\n            }\n        }\n        auctionData[auctionId].clearingPriceOrder = clearingOrder;\n        if (auctionData[auctionId].minFundingThreshold > currentBidSum) {\n            auctionData[auctionId].minFundingThresholdNotReached = true;\n        }\n        processFeesAndAuctioneerFunds(\n            auctionId,\n            fillVolumeOfAuctioneerOrder,\n            auctioneerId,\n            fullAuctionedAmount\n        );\n        {\n            (\n                uint64 userId,\n                uint96 buyAmount,\n                uint96 sellAmount\n            ) = IterableOrderedOrderSet.decodeOrder(clearingOrder);\n            emit AuctionCleared(\n                auctionId,\n                userId,\n                buyAmount,\n                sellAmount,\n                fillVolumeOfAuctioneerOrder,\n                uint96(currentBidSum)\n            );\n        }\n\n        // Gas refunds\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\n        auctionData[auctionId].interimOrder = bytes32(0);\n        auctionData[auctionId].interimSumBidAmount = uint256(0);\n        auctionData[auctionId].minimumBiddingAmountPerOrder = uint256(0);\n    }\n\n    function claimFromParticipantOrders(\n        uint256 auctionId,\n        bytes32[] memory orders\n    )\n        external\n        atStageFinished(auctionId)\n        returns (\n            uint256 sumAuctioningTokenAmount,\n            uint256 sumBiddingTokenAmount\n        )\n    {\n        (uint64 userId, , ) = orders[0].decodeOrder();\n        for (uint256 index = 0; index < orders.length; index++) {\n            (uint64 userIdOrder, , ) = orders[index].decodeOrder();\n            require((userIdOrder == userId), \"E23\");\n            (\n                uint256 auctioningTokenAmount,\n                uint256 biddingTokenAmount\n            ) = _claimFromParticipantOrder(auctionId, orders[index]);\n            sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\n                auctioningTokenAmount\n            );\n            sumBiddingTokenAmount = sumBiddingTokenAmount.add(\n                biddingTokenAmount\n            );\n        }\n        uint256 strategyId = auctionToStrategy[auctionId];\n        if (sumAuctioningTokenAmount > 0 && strategyId > 1) {\n            address userAddress = registeredUsers.getAddressAt(userId);\n            IStrategy strategy = strategyManager\n                .getStrategy(strategyId)\n                .strategyContract;\n            IERC20(auctionData[auctionId].auctioningToken).transfer(\n                address(strategy),\n                sumAuctioningTokenAmount\n            );\n            strategy.execute(\n                sumAuctioningTokenAmount,\n                address(auctionData[auctionId].auctioningToken),\n                auctionId,\n                userAddress\n            );\n            sumAuctioningTokenAmount = 0;\n        }\n        sendOutTokens(\n            auctionId,\n            sumAuctioningTokenAmount,\n            sumBiddingTokenAmount,\n            userId\n        );\n    }\n\n    function _claimFromParticipantOrder(\n        uint256 auctionId,\n        bytes32 order\n    )\n        internal\n        returns (\n            uint256 sumAuctioningTokenAmount,\n            uint256 sumBiddingTokenAmount\n        )\n    {\n        require((sellOrders[auctionId].remove(order)), \"E24\");\n        AuctionData memory auction = auctionData[auctionId];\n        (, uint96 priceNumerator, uint96 priceDenominator) = auction\n            .clearingPriceOrder\n            .decodeOrder();\n        bool minFundingThresholdNotReached = auction\n            .minFundingThresholdNotReached;\n        (uint64 userId, uint96 buyAmount, uint96 sellAmount) = order\n            .decodeOrder();\n        string memory referralCode;\n        uint256 referralFee;\n        if (minFundingThresholdNotReached) {\n            //[10]\n            sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);\n        } else {\n            //[23]\n            if (order == auction.clearingPriceOrder) {\n                //[25]\n                sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\n                    auction.volumeClearingPriceOrder.mul(priceNumerator).div(\n                        priceDenominator\n                    )\n                );\n                sumBiddingTokenAmount = sumBiddingTokenAmount.add(\n                    sellAmount.sub(auction.volumeClearingPriceOrder)\n                );\n            } else {\n                if (order.smallerThan(auction.clearingPriceOrder)) {\n                    //[17]\n                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\n                        sellAmount.mul(priceNumerator).div(priceDenominator)\n                    );\n                } else {\n                    //[24]\n                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(\n                        sellAmount\n                    );\n                }\n            }\n        }\n        {\n            if (sumAuctioningTokenAmount > 0) {\n                (referralCode, referralFee) = registerReferralEarnings(\n                    sellAmount,\n                    auctionId,\n                    order\n                );\n            }\n            sumBiddingTokenAmount = sumBiddingTokenAmount.sub(referralFee);\n            emit ClaimedFromOrder(\n                IClaimedFromOrder(\n                    auctionId,\n                    userId,\n                    buyAmount,\n                    sellAmount,\n                    referralCode,\n                    referralFee,\n                    sumAuctioningTokenAmount,\n                    sumBiddingTokenAmount\n                )\n            );\n        }\n    }\n\n    function processFeesAndAuctioneerFunds(\n        uint256 auctionId,\n        uint256 fillVolumeOfAuctioneerOrder,\n        uint64 auctioneerId,\n        uint96 fullAuctionedAmount\n    ) internal {\n        if (auctionData[auctionId].minFundingThresholdNotReached) {\n            sendOutTokens(auctionId, fullAuctionedAmount, 0, auctioneerId); //[4]\n        } else {\n            //[11]\n            (, uint96 priceNumerator, uint96 priceDenominator) = auctionData[\n                auctionId\n            ].clearingPriceOrder.decodeOrder();\n            uint256 unsettledAuctionTokens = fullAuctionedAmount.sub(\n                fillVolumeOfAuctioneerOrder\n            );\n            uint256 biddingTokenAmount = fillVolumeOfAuctioneerOrder\n                .mul(priceDenominator)\n                .div(priceNumerator);\n\n            // calculate fees to swap/send to the token address\n            uint256 feeAmount = biddingTokenAmount.mul(feeNumerator).div(\n                FEE_DENOMINATOR\n            );\n\n            uint256 biddingTokenAmountAfterFee = biddingTokenAmount.sub(\n                feeAmount\n            );\n\n            sendOutTokens(\n                auctionId,\n                unsettledAuctionTokens,\n                biddingTokenAmountAfterFee,\n                auctioneerId\n            ); //[5]\n\n            // swap allowed tokens to ETH\n            uint256 ethAmount = feeAmount;\n            address biddingAddress = address(\n                auctionData[auctionId].biddingToken\n            );\n            if (biddingAddress != uniswapV2Router.WETH()) {\n                console.log(feeAmount);\n                uint256 initialEthBalance = address(this).balance;\n                swapTokensForEth(biddingAddress, feeAmount);\n                ethAmount = address(this).balance.sub(initialEthBalance);\n                console.log(ethAmount);\n            } else {\n                // unwrap WETH to ETH\n                IWETH(uniswapV2Router.WETH()).withdraw(ethAmount);\n            }\n            //send eth to the fee receiver\n            (bool success, ) = registeredUsers\n                .getAddressAt(feeReceiverUserId)\n                .call{value: ethAmount}(\"\");\n            if (!success) revert EthSendingFailed();\n        }\n    }\n\n    function swapTokensForEth(address token, uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = uniswapV2Router.WETH();\n\n        IERC20(token).approve(address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function registerReferralEarnings(\n        uint256 sellAmount,\n        uint256 auctionId,\n        bytes32 order\n    ) internal returns (string memory referralCode, uint256 referralFee) {\n        referralCode = referrals[auctionId][order];\n        if (bytes(referralCode).length > 0) {\n            referralFee = sellAmount.mul(referralFeeNumerator[auctionId]).div(\n                FEE_DENOMINATOR\n            );\n            uint64 userId = getUserId(address(referralRewardManager));\n            sendOutTokens(auctionId, 0, referralFee, userId);\n            referralRewardManager.addToBalance(\n                referralCode,\n                referralFee,\n                address(auctionData[auctionId].auctioningToken)\n            );\n        }\n    }\n\n    function sendOutTokens(\n        uint256 auctionId,\n        uint256 auctioningTokenAmount,\n        uint256 biddingTokenAmount,\n        uint64 userId\n    ) internal {\n        address userAddress = registeredUsers.getAddressAt(userId);\n        if (auctioningTokenAmount > 0 && auctionToStrategy[auctionId] != 0) {\n            auctionData[auctionId].auctioningToken.safeTransfer(\n                userAddress,\n                auctioningTokenAmount\n            );\n        }\n        if (biddingTokenAmount > 0) {\n            auctionData[auctionId].biddingToken.safeTransfer(\n                userAddress,\n                biddingTokenAmount\n            );\n        }\n    }\n\n    function registerUser(address user) public returns (uint64 userId) {\n        numUsers = numUsers.add(1).toUint64();\n        require((registeredUsers.insert(numUsers, user)), \"E25\");\n        userId = numUsers;\n        emit UserRegistration(user, userId);\n    }\n\n    function getUserId(address user) public returns (uint64 userId) {\n        if (registeredUsers.hasAddress(user)) {\n            userId = registeredUsers.getId(user);\n        } else {\n            userId = registerUser(user);\n            emit NewUser(userId, user);\n        }\n    }\n\n    function getSecondsRemainingInBatch(\n        uint256 auctionId\n    ) public view returns (uint256) {\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\n            return 0;\n        }\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\n    }\n\n    function containsOrder(\n        uint256 auctionId,\n        bytes32 order\n    ) public view returns (bool) {\n        return sellOrders[auctionId].contains(order);\n    }\n}\n"
    },
    "contracts/test/Dependencies.sol": {
      "content": "import \"./WETH9.sol\";\n\ncontract Dependencies {}\n"
    },
    "contracts/test/ERC20Mintable.sol": {
      "content": "pragma solidity >=0.6.8;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mintable is ERC20 {\n    constructor(string memory name, string memory symbol)\n        public\n        ERC20(symbol, name)\n    {}\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/test/IterableOrderedOrderSetWrapper.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity ^0.8.2;\nimport \"../libraries/IterableOrderedOrderSet.sol\";\n\ncontract IterableOrderedOrderSetWrapper {\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\n\n    IterableOrderedOrderSet.Data internal data;\n\n    function initializeEmptyList() public {\n        data.initializeEmptyList();\n    }\n\n    function insert(bytes32 value) public returns (bool) {\n        return data.insert(value, IterableOrderedOrderSet.QUEUE_START);\n    }\n\n    function insertAt(bytes32 value, bytes32 at) public returns (bool) {\n        return data.insert(value, at);\n    }\n\n    function remove(bytes32 value) public returns (bool) {\n        return data.remove(value);\n    }\n\n    function removeKeepHistory(bytes32 value) public returns (bool) {\n        return data.removeKeepHistory(value);\n    }\n\n    function contains(bytes32 value) public view returns (bool) {\n        return data.contains(value);\n    }\n\n    function isEmpty() public view returns (bool) {\n        return data.isEmpty();\n    }\n\n    function first() public view returns (bytes32) {\n        return data.first();\n    }\n\n    function next(bytes32 value) public view returns (bytes32) {\n        return data.next(value);\n    }\n\n    function nextMap(bytes32 value) public view returns (bytes32) {\n        return data.nextMap[value];\n    }\n\n    function prevMap(bytes32 value) public view returns (bytes32) {\n        return data.prevMap[value];\n    }\n\n    function decodeOrder(\n        bytes32 value\n    ) public pure returns (uint64, uint96, uint96) {\n        return IterableOrderedOrderSet.decodeOrder(value);\n    }\n\n    function encodeOrder(\n        uint64 userId,\n        uint96 sellAmount,\n        uint96 buyAmount\n    ) public pure returns (bytes32) {\n        return\n            IterableOrderedOrderSet.encodeOrder(userId, sellAmount, buyAmount);\n    }\n\n    function smallerThan(\n        bytes32 orderLeft,\n        bytes32 orderRight\n    ) public pure returns (bool) {\n        return IterableOrderedOrderSet.smallerThan(orderLeft, orderRight);\n    }\n}\n"
    },
    "contracts/test/MockAuctionBot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MockAuctionBot {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable weth;\n    uint256 public amount;\n\n    constructor(IERC20 _weth) {\n        weth = _weth;\n    }\n\n    function setAmount(uint256 _sumOfSellAmounts) external {\n        amount = _sumOfSellAmounts;\n    }\n\n    function placeSellOrders(\n        uint256 auctionId,\n        uint96[] memory _minBuyAmounts,\n        uint96[] memory _sellAmounts,\n        bytes32[] memory _prevSellOrders,\n        string calldata referralCode\n    ) external returns (uint64 userId, uint256 sumOfSellAmounts) {\n        return\n            _placeSellOrders(\n                auctionId,\n                _minBuyAmounts,\n                _sellAmounts,\n                _prevSellOrders,\n                msg.sender,\n                referralCode\n            );\n    }\n\n    function placeSellOrdersOnBehalf(\n        uint256 auctionId,\n        uint96[] memory _minBuyAmounts,\n        uint96[] memory _sellAmounts,\n        bytes32[] memory _prevSellOrders,\n        address orderSubmitter,\n        string calldata referralCode\n    ) external returns (uint64 userId, uint256 sumOfSellAmounts) {\n        return\n            _placeSellOrders(\n                auctionId,\n                _minBuyAmounts,\n                _sellAmounts,\n                _prevSellOrders,\n                orderSubmitter,\n                referralCode\n            );\n    }\n\n    function _placeSellOrders(\n        uint256,\n        uint96[] memory,\n        uint96[] memory,\n        bytes32[] memory,\n        address,\n        string calldata\n    ) internal returns (uint64, uint256) {\n        weth.safeTransferFrom(msg.sender, address(this), amount);\n\n        return (0, amount);\n    }\n}\n"
    },
    "contracts/test/MockBiddingToken.sol": {
      "content": "pragma solidity >=0.6.8;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockBiddingToken is ERC20 {\n    constructor(string memory name, string memory symbol) ERC20(symbol, name) {}\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/test/WETH9.sol": {
      "content": "pragma solidity ^0.8.2;\n\ncontract WETH9 {\n    string public name = \"Wrapped Ether\";\n    string public symbol = \"WETH\";\n    uint8 public decimals = 18;\n\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n    event Deposit(address indexed dst, uint wad);\n    event Withdrawal(address indexed src, uint wad);\n\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    receive() external payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        payable(msg.sender).transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint wad\n    ) public returns (bool) {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != type(uint).max) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n"
    },
    "contracts/token/AuctionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../interfaces/IUniswapV2Factory.sol\";\nimport \"../interfaces/IUniswapV2Router02Wrapper.sol\";\n\ncontract AuctionToken is ERC20, Ownable {\n    IUniswapV2Router02Wrapper public uniswapV2Router;\n    address public immutable uniswapV2Pair;\n\n    uint256 public revShareFee;\n    uint256 public buybackFee;\n    uint256 public lpFee;\n    uint256 public teamFee;\n    uint256 public totalFee;\n\n    uint256 public ethDistributionThreshold = 1 ether;\n\n    uint256 public constant BASE = 100;\n\n    address public revShareWallet;\n    address public teamWallet;\n\n    // ========== EVENTS ==========\n\n    event LiquidityAdded(uint256 tokens, uint256 eth);\n    event Distribution(\n        uint256 amountForLiquidity,\n        uint256 amountForRevShare,\n        uint256 amountForTeam,\n        uint256 amountForBuyBack\n    );\n    event FeesUpdated(\n        uint256 revShareFee,\n        uint256 buybackFee,\n        uint256 lpFee,\n        uint256 teamFee,\n        uint256 totalFee\n    );\n\n    // ========== ERRORS ==========\n\n    error InvalidFee();\n    error EthSendingFailed();\n\n    // ========== CONSTRUCTOR ==========\n\n    /**\n     * @dev Sets up the AuctionToken contract with predefined fees and Uniswap router.\n     * @param _revShareFee Initial revenue share fee.\n     * @param _buybackFee Initial buyback fee.\n     * @param _lpFee Initial liquidity provider fee.\n     * @param _teamFee Initial team fee.\n     * @param _revShareWallet Address of the revenue sharing wallet.\n     * @param _teamWallet Address of the team wallet.\n     * @param _uniswapV2Router Address of the UniswapV2Router.\n     */\n    constructor(\n        uint256 _revShareFee,\n        uint256 _buybackFee,\n        uint256 _lpFee,\n        uint256 _teamFee,\n        address _revShareWallet,\n        address _teamWallet,\n        IUniswapV2Router02Wrapper _uniswapV2Router\n    ) ERC20(\"Auction\", \"AUCTION\") {\n        uniswapV2Router = _uniswapV2Router;\n\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        uint256 totalSupply = 1_000_000 * 1e18;\n\n        revShareFee = _revShareFee;\n        buybackFee = _buybackFee;\n        lpFee = _lpFee;\n        teamFee = _teamFee;\n        totalFee = revShareFee + buybackFee + lpFee + teamFee;\n\n        if (totalFee != BASE) {\n            revert InvalidFee();\n        }\n\n        revShareWallet = _revShareWallet;\n\n        teamWallet = _teamWallet;\n\n        _mint(msg.sender, totalSupply);\n    }\n\n    // ========== PUBLIC FUNCTIONS ==========\n\n    /**\n     * @dev Public receive function to allow the contract to receive ETH.\n     */\n    receive() external payable {}\n\n    // ========== ONLYOWNER (ADMIN) FUNCTIONS ==========\n\n    /**\n     * @notice Executes the distribution of contract's token balance for liquidity, revenue sharing, team, and buyback.\n     * @dev This function should be called to trigger the distribution mechanism manually.\n     *      It requires the caller to be the contract owner. It will call the internal function\n     *      `_executeDistribution` with the contract's current token balance.\n     */\n    function executeDistribution() external onlyOwner {\n        uint256 contractEthBalance = address(this).balance;\n\n        _executeDistribution(contractEthBalance);\n    }\n\n    /**\n     * @dev Sets a new revenue share wallet address\n     * @param _newRevShareWallet The new wallet address for revenue sharing\n     */\n    function setRevShareWallet(address _newRevShareWallet) external onlyOwner {\n        require(\n            _newRevShareWallet != address(0),\n            \"New address is the zero address\"\n        );\n        require(\n            _newRevShareWallet != revShareWallet,\n            \"New address is the same as current address\"\n        );\n        revShareWallet = _newRevShareWallet;\n    }\n\n    /**\n     * @dev Sets a new team wallet address\n     * @param _newTeamWallet The new wallet address for the team\n     */\n    function setTeamWallet(address _newTeamWallet) external onlyOwner {\n        require(\n            _newTeamWallet != address(0),\n            \"New address is the zero address\"\n        );\n        require(\n            _newTeamWallet != teamWallet,\n            \"New address is the same as current address\"\n        );\n        teamWallet = _newTeamWallet;\n    }\n\n    /**\n     * @dev Updates fee percentages and recalculates the total fee\n     * @param _revShareFee The new revenue share fee percentage\n     * @param _buybackFee The new buyback fee percentage\n     * @param _lpFee The new liquidity provider fee percentage\n     * @param _teamFee The new team fee percentage\n     */\n    function setFees(\n        uint256 _revShareFee,\n        uint256 _buybackFee,\n        uint256 _lpFee,\n        uint256 _teamFee\n    ) external onlyOwner {\n        // Include validation to ensure that fees are within reasonable bounds\n        uint256 newTotalFee = _revShareFee + _buybackFee + _lpFee + _teamFee;\n        require(newTotalFee <= BASE, \"Total fee exceeds the limit\");\n\n        // Update individual fees\n        revShareFee = _revShareFee;\n        buybackFee = _buybackFee;\n        lpFee = _lpFee;\n        teamFee = _teamFee;\n\n        // Update total fee\n        totalFee = newTotalFee;\n\n        // Emit an event to notify off-chain clients of the fee update\n        emit FeesUpdated(revShareFee, buybackFee, lpFee, teamFee, totalFee);\n    }\n\n    /**\n     * @dev Sets a new threshold for when ETH distribution should occur\n     * @param _newThreshold The new threshold in wei\n     */\n    function setEthDistributionThreshold(\n        uint256 _newThreshold\n    ) external onlyOwner {\n        require(_newThreshold > 0, \"Threshold must be greater than 0\");\n        ethDistributionThreshold = _newThreshold;\n    }\n\n    /**\n     * @dev Allows the owner to withdraw any ERC20 token sent to the contract.\n     * @param _token Address of the token contract.\n     * @param _to Address to send the tokens to.\n     */\n    function withdrawStuckToken(\n        address _token,\n        address _to\n    ) external onlyOwner {\n        require(_token != address(0), \"_token address cannot be 0\");\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(_to, _contractBalance);\n    }\n\n    /**\n     * @dev Allows the owner to withdraw ETH sent to the contract.\n     * @param toAddr Address to send the ETH to.\n     */\n    function withdrawStuckEth(address toAddr) external onlyOwner {\n        (bool success, ) = toAddr.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    // ========== OVERRIDES ==========\n\n    /**\n     * @dev Override function for ERC20 transfer to incorporate fee distribution.\n     * @param from Address tokens are being transferred from.\n     * @param to Address tokens are being transferred to.\n     * @param amount Amount of tokens to transfer.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 contractEthBalance = address(this).balance;\n\n        if (\n            contractEthBalance >= ethDistributionThreshold &&\n            msg.sender != address(this)\n        ) {\n            _executeDistribution(contractEthBalance);\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    // ========== PRIVATE FUNCTIONS ==========\n\n    /**\n     * @dev Executes distribution of ETH for liquidity, revenue share, team, and buyback.\n     * @param contractEthBalance Amount of ETH to distribute.\n     */\n    function _executeDistribution(uint256 contractEthBalance) private {\n        // Calculate amounts for each fee\n        uint256 amountForLiquidity = (contractEthBalance * lpFee) / totalFee;\n        uint256 amountForRevShare = (contractEthBalance * revShareFee) /\n            totalFee;\n        uint256 amountForTeam = (contractEthBalance * teamFee) / totalFee;\n        uint256 amountForBuyBack = contractEthBalance -\n            amountForLiquidity -\n            amountForRevShare -\n            amountForTeam;\n\n        // Swap ETH for Auction for buyback and lp\n        uint256 ethLiquidity = amountForLiquidity / 2;\n        uint256 amountToSwap = amountForBuyBack + ethLiquidity;\n\n        uint256 initialTokenBalance = balanceOf(address(this));\n        _swapEthForTokens(amountForBuyBack);\n\n        uint256 tokensBought = balanceOf(address(this)) - initialTokenBalance;\n        uint256 tokensLiquidity = (tokensBought * ethLiquidity) / amountToSwap;\n\n        if (tokensLiquidity > 0 && ethLiquidity > 0) {\n            _addLiquidity(tokensLiquidity, ethLiquidity);\n            emit LiquidityAdded(tokensLiquidity, ethLiquidity);\n        }\n\n        bool success;\n        // send to team addy\n        (success, ) = address(teamWallet).call{value: amountForTeam}(\"\");\n\n        if (!success) revert EthSendingFailed();\n\n        // send to rev sharing addy\n        (success, ) = address(revShareWallet).call{value: amountForRevShare}(\n            \"\"\n        );\n\n        if (!success) revert EthSendingFailed();\n\n        // emit event\n        emit Distribution(\n            amountForLiquidity,\n            amountForRevShare,\n            amountForTeam,\n            amountForBuyBack\n        );\n    }\n\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // send tokens to the wrapper\n        _transfer(address(this), address(uniswapV2Router), tokenAmount);\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function _swapEthForTokens(uint256 ethAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = uniswapV2Router.WETH();\n        path[1] = address(this);\n\n        // make the swap\n        uniswapV2Router.swapExactETHForTokens{value: ethAmount}(\n            0, // accept any amount of Tokens\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n}\n"
    },
    "contracts/token/UniswapV2Wrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../interfaces/IUniswapV2Router02Wrapper.sol\";\nimport \"../interfaces/IUniswapV2Router02.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract UniswapV2Wrapper is IUniswapV2Router02Wrapper {\n    IUniswapV2Router02 public uniswapV2Router;\n\n    constructor(IUniswapV2Router02 _uniswapV2Router) {\n        uniswapV2Router = _uniswapV2Router;\n    }\n\n    receive() external payable {}\n\n    function factory() external view returns (address) {\n        return uniswapV2Router.factory();\n    }\n\n    function WETH() external view returns (address) {\n        return uniswapV2Router.WETH();\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable {\n        IERC20(token).approve(address(uniswapV2Router), amountTokenDesired);\n\n        // add the liquidity\n        (uint256 amountToken, uint256 amountETH, ) = uniswapV2Router\n            .addLiquidityETH{value: msg.value}(\n            token,\n            amountTokenDesired,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n        );\n\n        if (msg.value > amountETH) {\n            (bool success, ) = msg.sender.call{value: msg.value - amountETH}(\n                \"\"\n            );\n            require(success, \"Transfer failed.\");\n        }\n\n        if (amountToken > amountTokenDesired) {\n            IERC20(token).transfer(\n                msg.sender,\n                amountToken - amountTokenDesired\n            );\n        }\n    }\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable {\n        uint256[] memory amounts = uniswapV2Router.swapExactETHForTokens{\n            value: msg.value\n        }(amountOutMin, path, address(this), deadline);\n\n        // send the token to the user\n        IERC20(path[path.length - 1]).transfer(to, amounts[amounts.length - 1]);\n    }\n}\n"
    },
    "contracts/TokenCreator/ERC20Deployer.sol": {
      "content": "pragma solidity >=0.6.8;\n\nimport \"./ERC20FixedSupply.sol\";\n\ncontract ERC20Deployer {\n    function deployToken(\n        string memory name,\n        string memory symbol,\n        uint256 totalSupply\n    ) public {\n        new ERC20FixedSupply(name, symbol, totalSupply, msg.sender);\n    }\n}\n"
    },
    "contracts/TokenCreator/ERC20FixedSupply.sol": {
      "content": "pragma solidity >=0.6.8;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20FixedSupply is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 totalSupply,\n        address owner\n    ) ERC20(symbol, name) {\n        _mint(owner, totalSupply);\n    }\n}\n"
    },
    "contracts/wrappers/DepositAndPlaceOrder.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IAuctionBot.sol\";\nimport \"../interfaces/IWETH.sol\";\n\ncontract DepositAndPlaceOrder {\n    IAuctionBot public immutable easyAuction;\n    IWETH public immutable nativeTokenWrapper;\n\n    constructor(IAuctionBot _easyAuction, address _nativeTokenWrapper) {\n        nativeTokenWrapper = IWETH(_nativeTokenWrapper);\n        easyAuction = _easyAuction;\n        IERC20(_nativeTokenWrapper).approve(\n            address(_easyAuction),\n            type(uint256).max\n        );\n    }\n\n    function depositAndPlaceOrder(\n        uint256 auctionId,\n        uint96[] calldata _minBuyAmounts,\n        bytes32[] calldata _prevSellOrders,\n        string calldata referralCode\n    ) external payable returns (uint64) {\n        uint96[] memory sellAmounts = new uint96[](1);\n        require(msg.value < 2 ** 96, \"too much value sent\");\n\n        nativeTokenWrapper.deposit{value: msg.value}();\n\n        sellAmounts[0] = uint96(msg.value);\n        (uint64 userId, uint256 sumOfSellAmounts) = easyAuction\n            .placeSellOrdersOnBehalf(\n                auctionId,\n                _minBuyAmounts,\n                sellAmounts,\n                _prevSellOrders,\n                msg.sender,\n                referralCode\n            );\n\n        if (msg.value > sumOfSellAmounts) {\n            uint256 remainingBalance = msg.value - sumOfSellAmounts;\n            // wrap the remaining balance\n            nativeTokenWrapper.withdraw(remainingBalance);\n            // transfer the remaining balance to the user\n            // slither-disable-next-line arbitrary-send-eth\n            (bool success, ) = msg.sender.call{value: remainingBalance}(\"\");\n            require(success, \"DepositAndPlaceOrder: transfer failed\");\n        }\n\n        return userId;\n    }\n\n    receive() external payable {\n        // only from nativeTokenWrapper\n        require(\n            msg.sender == address(nativeTokenWrapper),\n            \"DepositAndPlaceOrder: only nativeTokenWrapper\"\n        );\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}